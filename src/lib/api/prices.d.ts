/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/api/schema': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
		 *
		 *     - YAML: application/vnd.oai.openapi
		 *     - JSON: application/vnd.oai.openapi+json */
		get: operations['api_schema_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/auth': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Authentication: provide username/password
		 *     and get a bearer token in return.
		 *
		 *     - **username**: Open Food Facts user_id (not email)
		 *     - **password**: user password (clear text, but HTTPS encrypted)
		 *
		 *     A **token** is returned. If the **set_cookie** parameter is set to 1,
		 *     the token is also set as a cookie named "session" in the response.
		 *
		 *     To authenticate, you can either:
		 *     - use the **Authorization** header with the **Bearer** scheme,
		 *     e.g.: "Authorization: bearer token"
		 *     - use the **session** cookie, e.g.: "Cookie: session=token" */
		post: operations['auth_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/locations': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['locations_list'];
		put?: never;
		post: operations['locations_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/locations/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['locations_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/locations/osm/{osm_type}/{osm_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['locations_osm_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/price-tags': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['price_tags_list'];
		put?: never;
		post: operations['price_tags_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/price-tags/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['price_tags_retrieve'];
		put?: never;
		post?: never;
		delete: operations['price_tags_destroy'];
		options?: never;
		head?: never;
		patch: operations['price_tags_partial_update'];
		trace?: never;
	};
	'/api/v1/prices': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['prices_list'];
		put?: never;
		post: operations['prices_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/prices/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['prices_retrieve'];
		put?: never;
		post?: never;
		delete: operations['prices_destroy'];
		options?: never;
		head?: never;
		patch: operations['prices_partial_update'];
		trace?: never;
	};
	'/api/v1/prices/stats': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['prices_stats_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/products': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['products_list'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/products/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['products_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/products/code/{code}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['products_code_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/proofs': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['proofs_list'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/proofs/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['proofs_retrieve'];
		put?: never;
		post?: never;
		delete: operations['proofs_destroy'];
		options?: never;
		head?: never;
		patch: operations['proofs_partial_update'];
		trace?: never;
	};
	'/api/v1/proofs/process-with-gemini': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations['proofs_process_with_gemini_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/proofs/upload': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations['proofs_upload_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/session': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['session_retrieve'];
		put?: never;
		post?: never;
		delete: operations['session_destroy'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/stats': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['stats_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/status': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['status_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/users': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['users_list'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/users/{user_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['users_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** @enum {unknown} */
		BlankEnum: '';
		/**
		 * @description * `ADP` - ADP
		 *     * `AED` - AED
		 *     * `AFA` - AFA
		 *     * `AFN` - AFN
		 *     * `ALK` - ALK
		 *     * `ALL` - ALL
		 *     * `AMD` - AMD
		 *     * `ANG` - ANG
		 *     * `AOA` - AOA
		 *     * `AOK` - AOK
		 *     * `AON` - AON
		 *     * `AOR` - AOR
		 *     * `ARA` - ARA
		 *     * `ARL` - ARL
		 *     * `ARM` - ARM
		 *     * `ARP` - ARP
		 *     * `ARS` - ARS
		 *     * `ATS` - ATS
		 *     * `AUD` - AUD
		 *     * `AWG` - AWG
		 *     * `AZM` - AZM
		 *     * `AZN` - AZN
		 *     * `BAD` - BAD
		 *     * `BAM` - BAM
		 *     * `BAN` - BAN
		 *     * `BBD` - BBD
		 *     * `BDT` - BDT
		 *     * `BEC` - BEC
		 *     * `BEF` - BEF
		 *     * `BEL` - BEL
		 *     * `BGL` - BGL
		 *     * `BGM` - BGM
		 *     * `BGN` - BGN
		 *     * `BGO` - BGO
		 *     * `BHD` - BHD
		 *     * `BIF` - BIF
		 *     * `BMD` - BMD
		 *     * `BND` - BND
		 *     * `BOB` - BOB
		 *     * `BOL` - BOL
		 *     * `BOP` - BOP
		 *     * `BOV` - BOV
		 *     * `BRB` - BRB
		 *     * `BRC` - BRC
		 *     * `BRE` - BRE
		 *     * `BRL` - BRL
		 *     * `BRN` - BRN
		 *     * `BRR` - BRR
		 *     * `BRZ` - BRZ
		 *     * `BSD` - BSD
		 *     * `BTN` - BTN
		 *     * `BUK` - BUK
		 *     * `BWP` - BWP
		 *     * `BYB` - BYB
		 *     * `BYN` - BYN
		 *     * `BYR` - BYR
		 *     * `BZD` - BZD
		 *     * `CAD` - CAD
		 *     * `CDF` - CDF
		 *     * `CHE` - CHE
		 *     * `CHF` - CHF
		 *     * `CHW` - CHW
		 *     * `CLE` - CLE
		 *     * `CLF` - CLF
		 *     * `CLP` - CLP
		 *     * `CNH` - CNH
		 *     * `CNX` - CNX
		 *     * `CNY` - CNY
		 *     * `COP` - COP
		 *     * `COU` - COU
		 *     * `CRC` - CRC
		 *     * `CSD` - CSD
		 *     * `CSK` - CSK
		 *     * `CUC` - CUC
		 *     * `CUP` - CUP
		 *     * `CVE` - CVE
		 *     * `CYP` - CYP
		 *     * `CZK` - CZK
		 *     * `DDM` - DDM
		 *     * `DEM` - DEM
		 *     * `DJF` - DJF
		 *     * `DKK` - DKK
		 *     * `DOP` - DOP
		 *     * `DZD` - DZD
		 *     * `ECS` - ECS
		 *     * `ECV` - ECV
		 *     * `EEK` - EEK
		 *     * `EGP` - EGP
		 *     * `ERN` - ERN
		 *     * `ESA` - ESA
		 *     * `ESB` - ESB
		 *     * `ESP` - ESP
		 *     * `ETB` - ETB
		 *     * `EUR` - EUR
		 *     * `FIM` - FIM
		 *     * `FJD` - FJD
		 *     * `FKP` - FKP
		 *     * `FRF` - FRF
		 *     * `GBP` - GBP
		 *     * `GEK` - GEK
		 *     * `GEL` - GEL
		 *     * `GHC` - GHC
		 *     * `GHS` - GHS
		 *     * `GIP` - GIP
		 *     * `GMD` - GMD
		 *     * `GNF` - GNF
		 *     * `GNS` - GNS
		 *     * `GQE` - GQE
		 *     * `GRD` - GRD
		 *     * `GTQ` - GTQ
		 *     * `GWE` - GWE
		 *     * `GWP` - GWP
		 *     * `GYD` - GYD
		 *     * `HKD` - HKD
		 *     * `HNL` - HNL
		 *     * `HRD` - HRD
		 *     * `HRK` - HRK
		 *     * `HTG` - HTG
		 *     * `HUF` - HUF
		 *     * `IDR` - IDR
		 *     * `IEP` - IEP
		 *     * `ILP` - ILP
		 *     * `ILR` - ILR
		 *     * `ILS` - ILS
		 *     * `INR` - INR
		 *     * `IQD` - IQD
		 *     * `IRR` - IRR
		 *     * `ISJ` - ISJ
		 *     * `ISK` - ISK
		 *     * `ITL` - ITL
		 *     * `JMD` - JMD
		 *     * `JOD` - JOD
		 *     * `JPY` - JPY
		 *     * `KES` - KES
		 *     * `KGS` - KGS
		 *     * `KHR` - KHR
		 *     * `KMF` - KMF
		 *     * `KPW` - KPW
		 *     * `KRH` - KRH
		 *     * `KRO` - KRO
		 *     * `KRW` - KRW
		 *     * `KWD` - KWD
		 *     * `KYD` - KYD
		 *     * `KZT` - KZT
		 *     * `LAK` - LAK
		 *     * `LBP` - LBP
		 *     * `LKR` - LKR
		 *     * `LRD` - LRD
		 *     * `LSL` - LSL
		 *     * `LTL` - LTL
		 *     * `LTT` - LTT
		 *     * `LUC` - LUC
		 *     * `LUF` - LUF
		 *     * `LUL` - LUL
		 *     * `LVL` - LVL
		 *     * `LVR` - LVR
		 *     * `LYD` - LYD
		 *     * `MAD` - MAD
		 *     * `MAF` - MAF
		 *     * `MCF` - MCF
		 *     * `MDC` - MDC
		 *     * `MDL` - MDL
		 *     * `MGA` - MGA
		 *     * `MGF` - MGF
		 *     * `MKD` - MKD
		 *     * `MKN` - MKN
		 *     * `MLF` - MLF
		 *     * `MMK` - MMK
		 *     * `MNT` - MNT
		 *     * `MOP` - MOP
		 *     * `MRO` - MRO
		 *     * `MRU` - MRU
		 *     * `MTL` - MTL
		 *     * `MTP` - MTP
		 *     * `MUR` - MUR
		 *     * `MVP` - MVP
		 *     * `MVR` - MVR
		 *     * `MWK` - MWK
		 *     * `MXN` - MXN
		 *     * `MXP` - MXP
		 *     * `MXV` - MXV
		 *     * `MYR` - MYR
		 *     * `MZE` - MZE
		 *     * `MZM` - MZM
		 *     * `MZN` - MZN
		 *     * `NAD` - NAD
		 *     * `NGN` - NGN
		 *     * `NIC` - NIC
		 *     * `NIO` - NIO
		 *     * `NLG` - NLG
		 *     * `NOK` - NOK
		 *     * `NPR` - NPR
		 *     * `NZD` - NZD
		 *     * `OMR` - OMR
		 *     * `PAB` - PAB
		 *     * `PEI` - PEI
		 *     * `PEN` - PEN
		 *     * `PES` - PES
		 *     * `PGK` - PGK
		 *     * `PHP` - PHP
		 *     * `PKR` - PKR
		 *     * `PLN` - PLN
		 *     * `PLZ` - PLZ
		 *     * `PTE` - PTE
		 *     * `PYG` - PYG
		 *     * `QAR` - QAR
		 *     * `RHD` - RHD
		 *     * `ROL` - ROL
		 *     * `RON` - RON
		 *     * `RSD` - RSD
		 *     * `RUB` - RUB
		 *     * `RUR` - RUR
		 *     * `RWF` - RWF
		 *     * `SAR` - SAR
		 *     * `SBD` - SBD
		 *     * `SCR` - SCR
		 *     * `SDD` - SDD
		 *     * `SDG` - SDG
		 *     * `SDP` - SDP
		 *     * `SEK` - SEK
		 *     * `SGD` - SGD
		 *     * `SHP` - SHP
		 *     * `SIT` - SIT
		 *     * `SKK` - SKK
		 *     * `SLE` - SLE
		 *     * `SLL` - SLL
		 *     * `SOS` - SOS
		 *     * `SRD` - SRD
		 *     * `SRG` - SRG
		 *     * `SSP` - SSP
		 *     * `STD` - STD
		 *     * `STN` - STN
		 *     * `SUR` - SUR
		 *     * `SVC` - SVC
		 *     * `SYP` - SYP
		 *     * `SZL` - SZL
		 *     * `THB` - THB
		 *     * `TJR` - TJR
		 *     * `TJS` - TJS
		 *     * `TMM` - TMM
		 *     * `TMT` - TMT
		 *     * `TND` - TND
		 *     * `TOP` - TOP
		 *     * `TPE` - TPE
		 *     * `TRL` - TRL
		 *     * `TRY` - TRY
		 *     * `TTD` - TTD
		 *     * `TWD` - TWD
		 *     * `TZS` - TZS
		 *     * `UAH` - UAH
		 *     * `UAK` - UAK
		 *     * `UGS` - UGS
		 *     * `UGX` - UGX
		 *     * `USD` - USD
		 *     * `USN` - USN
		 *     * `USS` - USS
		 *     * `UYI` - UYI
		 *     * `UYP` - UYP
		 *     * `UYU` - UYU
		 *     * `UYW` - UYW
		 *     * `UZS` - UZS
		 *     * `VEB` - VEB
		 *     * `VED` - VED
		 *     * `VEF` - VEF
		 *     * `VES` - VES
		 *     * `VND` - VND
		 *     * `VNN` - VNN
		 *     * `VUV` - VUV
		 *     * `WST` - WST
		 *     * `XAF` - XAF
		 *     * `XAG` - XAG
		 *     * `XAU` - XAU
		 *     * `XBA` - XBA
		 *     * `XBB` - XBB
		 *     * `XBC` - XBC
		 *     * `XBD` - XBD
		 *     * `XCD` - XCD
		 *     * `XDR` - XDR
		 *     * `XEU` - XEU
		 *     * `XFO` - XFO
		 *     * `XFU` - XFU
		 *     * `XOF` - XOF
		 *     * `XPD` - XPD
		 *     * `XPF` - XPF
		 *     * `XPT` - XPT
		 *     * `XRE` - XRE
		 *     * `XSU` - XSU
		 *     * `XTS` - XTS
		 *     * `XUA` - XUA
		 *     * `XXX` - XXX
		 *     * `YDD` - YDD
		 *     * `YER` - YER
		 *     * `YUD` - YUD
		 *     * `YUM` - YUM
		 *     * `YUN` - YUN
		 *     * `YUR` - YUR
		 *     * `ZAL` - ZAL
		 *     * `ZAR` - ZAR
		 *     * `ZMK` - ZMK
		 *     * `ZMW` - ZMW
		 *     * `ZRN` - ZRN
		 *     * `ZRZ` - ZRZ
		 *     * `ZWD` - ZWD
		 *     * `ZWL` - ZWL
		 *     * `ZWR` - ZWR
		 * @enum {string}
		 */
		CurrencyEnum:
			| 'ADP'
			| 'AED'
			| 'AFA'
			| 'AFN'
			| 'ALK'
			| 'ALL'
			| 'AMD'
			| 'ANG'
			| 'AOA'
			| 'AOK'
			| 'AON'
			| 'AOR'
			| 'ARA'
			| 'ARL'
			| 'ARM'
			| 'ARP'
			| 'ARS'
			| 'ATS'
			| 'AUD'
			| 'AWG'
			| 'AZM'
			| 'AZN'
			| 'BAD'
			| 'BAM'
			| 'BAN'
			| 'BBD'
			| 'BDT'
			| 'BEC'
			| 'BEF'
			| 'BEL'
			| 'BGL'
			| 'BGM'
			| 'BGN'
			| 'BGO'
			| 'BHD'
			| 'BIF'
			| 'BMD'
			| 'BND'
			| 'BOB'
			| 'BOL'
			| 'BOP'
			| 'BOV'
			| 'BRB'
			| 'BRC'
			| 'BRE'
			| 'BRL'
			| 'BRN'
			| 'BRR'
			| 'BRZ'
			| 'BSD'
			| 'BTN'
			| 'BUK'
			| 'BWP'
			| 'BYB'
			| 'BYN'
			| 'BYR'
			| 'BZD'
			| 'CAD'
			| 'CDF'
			| 'CHE'
			| 'CHF'
			| 'CHW'
			| 'CLE'
			| 'CLF'
			| 'CLP'
			| 'CNH'
			| 'CNX'
			| 'CNY'
			| 'COP'
			| 'COU'
			| 'CRC'
			| 'CSD'
			| 'CSK'
			| 'CUC'
			| 'CUP'
			| 'CVE'
			| 'CYP'
			| 'CZK'
			| 'DDM'
			| 'DEM'
			| 'DJF'
			| 'DKK'
			| 'DOP'
			| 'DZD'
			| 'ECS'
			| 'ECV'
			| 'EEK'
			| 'EGP'
			| 'ERN'
			| 'ESA'
			| 'ESB'
			| 'ESP'
			| 'ETB'
			| 'EUR'
			| 'FIM'
			| 'FJD'
			| 'FKP'
			| 'FRF'
			| 'GBP'
			| 'GEK'
			| 'GEL'
			| 'GHC'
			| 'GHS'
			| 'GIP'
			| 'GMD'
			| 'GNF'
			| 'GNS'
			| 'GQE'
			| 'GRD'
			| 'GTQ'
			| 'GWE'
			| 'GWP'
			| 'GYD'
			| 'HKD'
			| 'HNL'
			| 'HRD'
			| 'HRK'
			| 'HTG'
			| 'HUF'
			| 'IDR'
			| 'IEP'
			| 'ILP'
			| 'ILR'
			| 'ILS'
			| 'INR'
			| 'IQD'
			| 'IRR'
			| 'ISJ'
			| 'ISK'
			| 'ITL'
			| 'JMD'
			| 'JOD'
			| 'JPY'
			| 'KES'
			| 'KGS'
			| 'KHR'
			| 'KMF'
			| 'KPW'
			| 'KRH'
			| 'KRO'
			| 'KRW'
			| 'KWD'
			| 'KYD'
			| 'KZT'
			| 'LAK'
			| 'LBP'
			| 'LKR'
			| 'LRD'
			| 'LSL'
			| 'LTL'
			| 'LTT'
			| 'LUC'
			| 'LUF'
			| 'LUL'
			| 'LVL'
			| 'LVR'
			| 'LYD'
			| 'MAD'
			| 'MAF'
			| 'MCF'
			| 'MDC'
			| 'MDL'
			| 'MGA'
			| 'MGF'
			| 'MKD'
			| 'MKN'
			| 'MLF'
			| 'MMK'
			| 'MNT'
			| 'MOP'
			| 'MRO'
			| 'MRU'
			| 'MTL'
			| 'MTP'
			| 'MUR'
			| 'MVP'
			| 'MVR'
			| 'MWK'
			| 'MXN'
			| 'MXP'
			| 'MXV'
			| 'MYR'
			| 'MZE'
			| 'MZM'
			| 'MZN'
			| 'NAD'
			| 'NGN'
			| 'NIC'
			| 'NIO'
			| 'NLG'
			| 'NOK'
			| 'NPR'
			| 'NZD'
			| 'OMR'
			| 'PAB'
			| 'PEI'
			| 'PEN'
			| 'PES'
			| 'PGK'
			| 'PHP'
			| 'PKR'
			| 'PLN'
			| 'PLZ'
			| 'PTE'
			| 'PYG'
			| 'QAR'
			| 'RHD'
			| 'ROL'
			| 'RON'
			| 'RSD'
			| 'RUB'
			| 'RUR'
			| 'RWF'
			| 'SAR'
			| 'SBD'
			| 'SCR'
			| 'SDD'
			| 'SDG'
			| 'SDP'
			| 'SEK'
			| 'SGD'
			| 'SHP'
			| 'SIT'
			| 'SKK'
			| 'SLE'
			| 'SLL'
			| 'SOS'
			| 'SRD'
			| 'SRG'
			| 'SSP'
			| 'STD'
			| 'STN'
			| 'SUR'
			| 'SVC'
			| 'SYP'
			| 'SZL'
			| 'THB'
			| 'TJR'
			| 'TJS'
			| 'TMM'
			| 'TMT'
			| 'TND'
			| 'TOP'
			| 'TPE'
			| 'TRL'
			| 'TRY'
			| 'TTD'
			| 'TWD'
			| 'TZS'
			| 'UAH'
			| 'UAK'
			| 'UGS'
			| 'UGX'
			| 'USD'
			| 'USN'
			| 'USS'
			| 'UYI'
			| 'UYP'
			| 'UYU'
			| 'UYW'
			| 'UZS'
			| 'VEB'
			| 'VED'
			| 'VEF'
			| 'VES'
			| 'VND'
			| 'VNN'
			| 'VUV'
			| 'WST'
			| 'XAF'
			| 'XAG'
			| 'XAU'
			| 'XBA'
			| 'XBB'
			| 'XBC'
			| 'XBD'
			| 'XCD'
			| 'XDR'
			| 'XEU'
			| 'XFO'
			| 'XFU'
			| 'XOF'
			| 'XPD'
			| 'XPF'
			| 'XPT'
			| 'XRE'
			| 'XSU'
			| 'XTS'
			| 'XUA'
			| 'XXX'
			| 'YDD'
			| 'YER'
			| 'YUD'
			| 'YUM'
			| 'YUN'
			| 'YUR'
			| 'ZAL'
			| 'ZAR'
			| 'ZMK'
			| 'ZMW'
			| 'ZRN'
			| 'ZRZ'
			| 'ZWD'
			| 'ZWL'
			| 'ZWR';
		/**
		 * @description * `QUANTITY` - QUANTITY
		 *     * `SALE` - SALE
		 *     * `SEASONAL` - SEASONAL
		 *     * `LOYALTY_PROGRAM` - LOYALTY_PROGRAM
		 *     * `EXPIRES_SOON` - EXPIRES_SOON
		 *     * `PICK_IT_YOURSELF` - PICK_IT_YOURSELF
		 *     * `SECOND_HAND` - SECOND_HAND
		 *     * `OTHER` - OTHER
		 * @enum {string}
		 */
		DiscountTypeEnum:
			| 'QUANTITY'
			| 'SALE'
			| 'SEASONAL'
			| 'LOYALTY_PROGRAM'
			| 'EXPIRES_SOON'
			| 'PICK_IT_YOURSELF'
			| 'SECOND_HAND'
			| 'OTHER';
		Location: {
			readonly id: number;
			type: components['schemas']['TypeA9eEnum'];
			/** Format: int64 */
			osm_id: number | null;
			osm_type:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			osm_name?: string | null;
			osm_display_name?: string | null;
			osm_tag_key?: string | null;
			osm_tag_value?: string | null;
			osm_brand?: string | null;
			osm_address_postcode?: string | null;
			osm_address_city?: string | null;
			osm_address_country?: string | null;
			osm_address_country_code?: string | null;
			/** Format: double */
			osm_lat?: number | null;
			/** Format: double */
			osm_lon?: number | null;
			osm_version?: number | null;
			/** Format: uri */
			website_url?: string | null;
			price_count?: number | null;
			user_count?: number | null;
			product_count?: number | null;
			proof_count?: number | null;
			source?: string | null;
			/** Format: date-time */
			created?: string;
			/** Format: date-time */
			readonly updated: string;
		};
		LocationCreate: {
			type: components['schemas']['TypeA9eEnum'];
			/** Format: int64 */
			osm_id?: number | null;
			osm_type?:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: uri */
			website_url?: string | null;
		};
		/**
		 * @description * `NODE` - NODE
		 *     * `WAY` - WAY
		 *     * `RELATION` - RELATION
		 * @enum {string}
		 */
		LocationOsmTypeEnum: 'NODE' | 'WAY' | 'RELATION';
		Login: {
			username: string;
			password: string;
		};
		/** @enum {unknown} */
		NullEnum: null;
		PaginatedLocationList: {
			/** @example 123 */
			count: number;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=4
			 */
			next?: string | null;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=2
			 */
			previous?: string | null;
			results: components['schemas']['Location'][];
		};
		PaginatedPriceFullList: {
			/** @example 123 */
			count: number;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=4
			 */
			next?: string | null;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=2
			 */
			previous?: string | null;
			results: components['schemas']['PriceFull'][];
		};
		PaginatedPriceTagFullList: {
			/** @example 123 */
			count: number;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=4
			 */
			next?: string | null;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=2
			 */
			previous?: string | null;
			results: components['schemas']['PriceTagFull'][];
		};
		PaginatedProductFullList: {
			/** @example 123 */
			count: number;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=4
			 */
			next?: string | null;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=2
			 */
			previous?: string | null;
			results: components['schemas']['ProductFull'][];
		};
		PaginatedProofHalfFullList: {
			/** @example 123 */
			count: number;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=4
			 */
			next?: string | null;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=2
			 */
			previous?: string | null;
			results: components['schemas']['ProofHalfFull'][];
		};
		PaginatedUserList: {
			/** @example 123 */
			count: number;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=4
			 */
			next?: string | null;
			/**
			 * Format: uri
			 * @example http://api.example.org/accounts/?page=2
			 */
			previous?: string | null;
			results: components['schemas']['User'][];
		};
		PatchedPriceTagUpdate: {
			/** @description Coordinates of the bounding box, in the format [y_min, x_min, y_max, x_max] */
			bounding_box?: number[];
			/** @description The annotation status
			 *
			 *     * `0` - deleted
			 *     * `1` - linked_to_price
			 *     * `2` - not_readable
			 *     * `3` - truncated
			 *     * `4` - not_price_tag */
			status?: (components['schemas']['StatusEnum'] | components['schemas']['NullEnum']) | null;
			price_id?: number;
		};
		PatchedPriceUpdate: {
			category_tag?: string | null;
			labels_tags?: unknown;
			origins_tags?: unknown;
			/** Format: double */
			price?: number | null;
			price_is_discounted?: boolean;
			/** Format: double */
			price_without_discount?: number | null;
			discount_type?:
				| (
						| components['schemas']['DiscountTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			price_per?:
				| (
						| components['schemas']['PricePerEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			/**
			 * Receipt's price quantity (user input)
			 * Format: double
			 */
			receipt_quantity?: number | null;
		};
		PatchedProofUpdate: {
			/** Format: int64 */
			location_osm_id?: number | null;
			location_osm_type?:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			type?: components['schemas']['TypeEbbEnum'];
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			/** Receipt's number of prices (user input) */
			receipt_price_count?: number | null;
			/**
			 * Receipt's total amount (user input)
			 * Format: double
			 */
			receipt_price_total?: number | null;
			/**
			 * Receipt's online delivery costs (user input)
			 * Format: double
			 */
			receipt_online_delivery_costs?: number | null;
			ready_for_price_tag_validation?: boolean;
		};
		PriceCreate: {
			category_tag?: string | null;
			labels_tags?: unknown;
			origins_tags?: unknown;
			/** Format: double */
			price?: number | null;
			price_is_discounted?: boolean;
			/** Format: double */
			price_without_discount?: number | null;
			discount_type?:
				| (
						| components['schemas']['DiscountTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			price_per?:
				| (
						| components['schemas']['PricePerEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			/**
			 * Receipt's price quantity (user input)
			 * Format: double
			 */
			receipt_quantity?: number | null;
			type?: components['schemas']['TypeF36Enum'];
			product_code?: string | null;
			product_name?: string | null;
			/** Format: int64 */
			location_osm_id?: number | null;
			location_osm_type?:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			location_id?: number;
			proof_id: number;
		};
		PriceFull: {
			readonly id: number;
			product_id: number;
			location_id: number;
			proof_id: number;
			product: components['schemas']['ProductFull'];
			location: components['schemas']['Location'];
			proof: components['schemas']['Proof'];
			type: components['schemas']['TypeF36Enum'];
			product_code?: string | null;
			product_name?: string | null;
			category_tag?: string | null;
			labels_tags?: unknown;
			origins_tags?: unknown;
			/** Format: double */
			price?: number | null;
			price_is_discounted?: boolean;
			/** Format: double */
			price_without_discount?: number | null;
			discount_type?:
				| (
						| components['schemas']['DiscountTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			price_per?:
				| (
						| components['schemas']['PricePerEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: int64 */
			location_osm_id?: number | null;
			location_osm_type?:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			/**
			 * Receipt's price quantity (user input)
			 * Format: double
			 */
			receipt_quantity?: number | null;
			owner?: string | null;
			source?: string | null;
			/** Format: date-time */
			created?: string;
			/** Format: date-time */
			readonly updated: string;
		};
		/**
		 * @description * `UNIT` - UNIT
		 *     * `KILOGRAM` - KILOGRAM
		 * @enum {string}
		 */
		PricePerEnum: 'UNIT' | 'KILOGRAM';
		PriceStats: {
			price__count: number;
			/** Format: double */
			price__min: number;
			/** Format: double */
			price__max: number;
			/** Format: double */
			price__avg: number;
		};
		PriceTagCreate: {
			/** @description Coordinates of the bounding box, in the format [y_min, x_min, y_max, x_max] */
			bounding_box: number[];
			/** @description The annotation status
			 *
			 *     * `0` - deleted
			 *     * `1` - linked_to_price
			 *     * `2` - not_readable
			 *     * `3` - truncated
			 *     * `4` - not_price_tag */
			status?: (components['schemas']['StatusEnum'] | components['schemas']['NullEnum']) | null;
			price_id?: number;
			proof_id: number;
		};
		PriceTagFull: {
			readonly id: number;
			/** @description The price linked to this tag */
			readonly price_id: number | null;
			readonly predictions: components['schemas']['PriceTagPrediction'][];
			proof: components['schemas']['ProofHalfFull'];
			/** @description Coordinates of the bounding box, in the format [y_min, x_min, y_max, x_max] */
			bounding_box: number[];
			/** @description The annotation status
			 *
			 *     * `0` - deleted
			 *     * `1` - linked_to_price
			 *     * `2` - not_readable
			 *     * `3` - truncated
			 *     * `4` - not_price_tag */
			status?: (components['schemas']['StatusEnum'] | components['schemas']['NullEnum']) | null;
			/** @description The version of the object detector model that generated the prediction */
			model_version?: string | null;
			prediction_count?: number | null;
			/** @description The name of the user who created this price tag. This field is null if the tag was created by a model. */
			created_by?: string | null;
			/** @description The name of the user who last updated this price tag bounding boxes. If the price tag bounding boxes were never updated, this field is null. */
			updated_by?: string | null;
			/**
			 * Format: date-time
			 * @description When the tag was created in DB
			 */
			created?: string;
			/**
			 * Format: date-time
			 * @description When the tag was last updated
			 */
			readonly updated: string;
		};
		PriceTagPrediction: {
			/** @description The type of the prediction
			 *
			 *     * `PRICE_TAG_EXTRACTION` - PRICE_TAG_EXTRACTION */
			type: components['schemas']['PriceTagPredictionTypeEnum'];
			/** @description The name of the model that generated the prediction */
			model_name: string;
			/** @description The specific version of the model that generated the prediction */
			model_version: string;
			/**
			 * Format: date-time
			 * @description When the prediction was created in DB
			 */
			created?: string;
			/** @description a dict representing the data of the prediction. This field is model-specific. */
			data?: unknown;
		};
		/**
		 * @description * `PRICE_TAG_EXTRACTION` - PRICE_TAG_EXTRACTION
		 * @enum {string}
		 */
		PriceTagPredictionTypeEnum: 'PRICE_TAG_EXTRACTION';
		PriceTagUpdate: {
			/** @description Coordinates of the bounding box, in the format [y_min, x_min, y_max, x_max] */
			bounding_box: number[];
			/** @description The annotation status
			 *
			 *     * `0` - deleted
			 *     * `1` - linked_to_price
			 *     * `2` - not_readable
			 *     * `3` - truncated
			 *     * `4` - not_price_tag */
			status?: (components['schemas']['StatusEnum'] | components['schemas']['NullEnum']) | null;
			price_id: number;
		};
		PriceUpdate: {
			category_tag?: string | null;
			labels_tags?: unknown;
			origins_tags?: unknown;
			/** Format: double */
			price?: number | null;
			price_is_discounted?: boolean;
			/** Format: double */
			price_without_discount?: number | null;
			discount_type?:
				| (
						| components['schemas']['DiscountTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			price_per?:
				| (
						| components['schemas']['PricePerEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			/**
			 * Receipt's price quantity (user input)
			 * Format: double
			 */
			receipt_quantity?: number | null;
		};
		ProductFull: {
			readonly id: number;
			code: string;
			source?:
				| (
						| components['schemas']['SourceEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date-time */
			source_last_synced?: string | null;
			product_name?: string | null;
			image_url?: string | null;
			product_quantity?: number | null;
			product_quantity_unit?: string | null;
			categories_tags?: string[];
			brands?: string | null;
			brands_tags?: string[];
			labels_tags?: string[];
			nutriscore_grade?: string | null;
			ecoscore_grade?: string | null;
			nova_group?: number | null;
			unique_scans_n?: number | null;
			price_count?: number | null;
			price_currency_count?: number | null;
			location_count?: number | null;
			location_type_osm_country_count?: number | null;
			user_count?: number | null;
			proof_count?: number | null;
			/** Format: date-time */
			created?: string;
			/** Format: date-time */
			readonly updated: string;
		};
		Proof: {
			readonly id: number;
			location_id: number;
			file_path?: string | null;
			mimetype?: string | null;
			type: components['schemas']['TypeEbbEnum'];
			image_thumb_path?: string | null;
			/** Format: int64 */
			location_osm_id?: number | null;
			location_osm_type?:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Receipt's number of prices (user input) */
			receipt_price_count?: number | null;
			/**
			 * Receipt's total amount (user input)
			 * Format: double
			 */
			receipt_price_total?: number | null;
			/**
			 * Receipt's online delivery costs (user input)
			 * Format: double
			 */
			receipt_online_delivery_costs?: number | null;
			ready_for_price_tag_validation?: boolean;
			price_count?: number | null;
			prediction_count?: number | null;
			owner?: string | null;
			source?: string | null;
			/** Format: date-time */
			created?: string;
			/** Format: date-time */
			readonly updated: string;
		};
		ProofFull: {
			readonly id: number;
			location_id: number;
			location: components['schemas']['Location'];
			readonly predictions: components['schemas']['ProofPrediction'][];
			file_path?: string | null;
			mimetype?: string | null;
			type: components['schemas']['TypeEbbEnum'];
			image_thumb_path?: string | null;
			/** Format: int64 */
			location_osm_id?: number | null;
			location_osm_type?:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Receipt's number of prices (user input) */
			receipt_price_count?: number | null;
			/**
			 * Receipt's total amount (user input)
			 * Format: double
			 */
			receipt_price_total?: number | null;
			/**
			 * Receipt's online delivery costs (user input)
			 * Format: double
			 */
			receipt_online_delivery_costs?: number | null;
			ready_for_price_tag_validation?: boolean;
			price_count?: number | null;
			prediction_count?: number | null;
			owner?: string | null;
			source?: string | null;
			/** Format: date-time */
			created?: string;
			/** Format: date-time */
			readonly updated: string;
		};
		ProofHalfFull: {
			readonly id: number;
			location_id: number;
			location: components['schemas']['Location'];
			file_path?: string | null;
			mimetype?: string | null;
			type: components['schemas']['TypeEbbEnum'];
			image_thumb_path?: string | null;
			/** Format: int64 */
			location_osm_id?: number | null;
			location_osm_type?:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Receipt's number of prices (user input) */
			receipt_price_count?: number | null;
			/**
			 * Receipt's total amount (user input)
			 * Format: double
			 */
			receipt_price_total?: number | null;
			/**
			 * Receipt's online delivery costs (user input)
			 * Format: double
			 */
			receipt_online_delivery_costs?: number | null;
			ready_for_price_tag_validation?: boolean;
			price_count?: number | null;
			prediction_count?: number | null;
			owner?: string | null;
			source?: string | null;
			/** Format: date-time */
			created?: string;
			/** Format: date-time */
			readonly updated: string;
		};
		ProofPrediction: {
			/** The type of the prediction */
			type: components['schemas']['ProofPredictionTypeEnum'];
			/** The name of the model that generated the prediction */
			model_name: string;
			/** The specific version of the model that generated the prediction */
			model_version: string;
			/**
			 * When the prediction was created in DB
			 * Format: date-time
			 */
			created?: string;
			/** A dict representing the data of the prediction. This field is model-specific. */
			data?: unknown;
			/** The predicted value, only for classification models, null otherwise. */
			value?: string | null;
			/**
			 * The maximum confidence of the prediction, may be null for some models.For object detection models, this is the confidence of the most confident object.For classification models, this is the confidence of the predicted class.
			 * Format: double
			 */
			max_confidence?: number | null;
		};
		/**
		 * @description * `OBJECT_DETECTION` - OBJECT_DETECTION
		 *     * `CLASSIFICATION` - CLASSIFICATION
		 *     * `RECEIPT_EXTRACTION` - RECEIPT_EXTRACTION
		 * @enum {string}
		 */
		ProofPredictionTypeEnum: 'OBJECT_DETECTION' | 'CLASSIFICATION' | 'RECEIPT_EXTRACTION';
		ProofProcessWithGemini: {
			files: string[];
			mode: string;
		};
		ProofUpdate: {
			/** Format: int64 */
			location_osm_id?: number | null;
			location_osm_type?:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			type: components['schemas']['TypeEbbEnum'];
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			/** Receipt's number of prices (user input) */
			receipt_price_count?: number | null;
			/**
			 * Receipt's total amount (user input)
			 * Format: double
			 */
			receipt_price_total?: number | null;
			/**
			 * Receipt's online delivery costs (user input)
			 * Format: double
			 */
			receipt_online_delivery_costs?: number | null;
			ready_for_price_tag_validation?: boolean;
		};
		ProofUpload: {
			file: string;
			/** Format: int64 */
			location_osm_id?: number | null;
			location_osm_type?:
				| (
						| components['schemas']['LocationOsmTypeEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			type: components['schemas']['TypeEbbEnum'];
			currency?:
				| (
						| components['schemas']['CurrencyEnum']
						| components['schemas']['BlankEnum']
						| components['schemas']['NullEnum']
				  )
				| null;
			/** Format: date */
			date?: string | null;
			/** Receipt's number of prices (user input) */
			receipt_price_count?: number | null;
			/**
			 * Receipt's total amount (user input)
			 * Format: double
			 */
			receipt_price_total?: number | null;
			/**
			 * Receipt's online delivery costs (user input)
			 * Format: double
			 */
			receipt_online_delivery_costs?: number | null;
			ready_for_price_tag_validation?: boolean;
			location_id?: number;
		};
		SessionFull: {
			user_id: string;
			token: string;
			created: string;
			last_used: string;
		};
		SessionResponse: {
			access_token: string;
			token_type: string;
		};
		/**
		 * @description * `off` - off
		 *     * `obf` - obf
		 *     * `opff` - opff
		 *     * `opf` - opf
		 *     * `off_pro` - off_pro
		 * @enum {string}
		 */
		SourceEnum: 'off' | 'obf' | 'opff' | 'opf' | 'off_pro';
		Status: {
			status: string;
		};
		/**
		 * @description * `0` - deleted
		 *     * `1` - linked_to_price
		 *     * `2` - not_readable
		 *     * `3` - truncated
		 *     * `4` - not_price_tag
		 * @enum {integer}
		 */
		StatusEnum: 0 | 1 | 2 | 3 | 4;
		TotalStats: {
			price_count?: number;
			price_type_product_code_count?: number;
			price_type_category_tag_count?: number;
			price_with_discount_count?: number;
			price_currency_count?: number;
			price_year_count?: number;
			price_location_country_count?: number;
			price_type_group_community_count?: number;
			price_type_group_consumption_count?: number;
			price_source_web_count?: number;
			price_source_mobile_count?: number;
			price_source_api_count?: number;
			price_source_other_count?: number;
			product_count?: number;
			product_source_off_count?: number;
			product_source_obf_count?: number;
			product_source_opff_count?: number;
			product_source_opf_count?: number;
			product_with_price_count?: number;
			product_source_off_with_price_count?: number;
			product_source_obf_with_price_count?: number;
			product_source_opff_with_price_count?: number;
			product_source_opf_with_price_count?: number;
			location_count?: number;
			location_with_price_count?: number;
			location_type_osm_count?: number;
			location_type_online_count?: number;
			location_type_osm_country_count?: number;
			proof_count?: number;
			proof_with_price_count?: number;
			proof_type_price_tag_count?: number;
			proof_type_receipt_count?: number;
			proof_type_gdpr_request_count?: number;
			proof_type_shop_import_count?: number;
			proof_type_group_community_count?: number;
			proof_type_group_consumption_count?: number;
			proof_source_web_count?: number;
			proof_source_mobile_count?: number;
			proof_source_api_count?: number;
			proof_source_other_count?: number;
			price_tag_count?: number;
			price_tag_status_unknown_count?: number;
			price_tag_status_linked_to_price_count?: number;
			user_count?: number;
			user_with_price_count?: number;
			/** Format: date-time */
			readonly updated: string;
		};
		/**
		 * @description * `OSM` - OSM
		 *     * `ONLINE` - ONLINE
		 * @enum {string}
		 */
		TypeA9eEnum: 'OSM' | 'ONLINE';
		/**
		 * @description * `PRICE_TAG` - PRICE_TAG
		 *     * `RECEIPT` - RECEIPT
		 *     * `GDPR_REQUEST` - GDPR_REQUEST
		 *     * `SHOP_IMPORT` - SHOP_IMPORT
		 * @enum {string}
		 */
		TypeEbbEnum: 'PRICE_TAG' | 'RECEIPT' | 'GDPR_REQUEST' | 'SHOP_IMPORT';
		/**
		 * @description * `PRODUCT` - PRODUCT
		 *     * `CATEGORY` - CATEGORY
		 * @enum {string}
		 */
		TypeF36Enum: 'PRODUCT' | 'CATEGORY';
		User: {
			user_id: string;
			price_count?: number | null;
			price_type_group_community_count?: number;
			price_type_group_consumption_count?: number;
			price_currency_count?: number | null;
			proof_count?: number | null;
			proof_type_group_community_count?: number;
			proof_type_group_consumption_count?: number;
			location_count?: number | null;
			location_type_osm_country_count?: number | null;
			product_count?: number | null;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	api_schema_retrieve: {
		parameters: {
			query?: {
				format?: 'json' | 'yaml';
				lang?:
					| 'af'
					| 'ar'
					| 'ar-dz'
					| 'ast'
					| 'az'
					| 'be'
					| 'bg'
					| 'bn'
					| 'br'
					| 'bs'
					| 'ca'
					| 'ckb'
					| 'cs'
					| 'cy'
					| 'da'
					| 'de'
					| 'dsb'
					| 'el'
					| 'en'
					| 'en-au'
					| 'en-gb'
					| 'eo'
					| 'es'
					| 'es-ar'
					| 'es-co'
					| 'es-mx'
					| 'es-ni'
					| 'es-ve'
					| 'et'
					| 'eu'
					| 'fa'
					| 'fi'
					| 'fr'
					| 'fy'
					| 'ga'
					| 'gd'
					| 'gl'
					| 'he'
					| 'hi'
					| 'hr'
					| 'hsb'
					| 'hu'
					| 'hy'
					| 'ia'
					| 'id'
					| 'ig'
					| 'io'
					| 'is'
					| 'it'
					| 'ja'
					| 'ka'
					| 'kab'
					| 'kk'
					| 'km'
					| 'kn'
					| 'ko'
					| 'ky'
					| 'lb'
					| 'lt'
					| 'lv'
					| 'mk'
					| 'ml'
					| 'mn'
					| 'mr'
					| 'ms'
					| 'my'
					| 'nb'
					| 'ne'
					| 'nl'
					| 'nn'
					| 'os'
					| 'pa'
					| 'pl'
					| 'pt'
					| 'pt-br'
					| 'ro'
					| 'ru'
					| 'sk'
					| 'sl'
					| 'sq'
					| 'sr'
					| 'sr-latn'
					| 'sv'
					| 'sw'
					| 'ta'
					| 'te'
					| 'tg'
					| 'th'
					| 'tk'
					| 'tr'
					| 'tt'
					| 'udm'
					| 'ug'
					| 'uk'
					| 'ur'
					| 'uz'
					| 'vi'
					| 'zh-hans'
					| 'zh-hant';
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/vnd.oai.openapi': {
						[key: string]: unknown;
					};
					'application/yaml': {
						[key: string]: unknown;
					};
					'application/vnd.oai.openapi+json': {
						[key: string]: unknown;
					};
					'application/json': {
						[key: string]: unknown;
					};
				};
			};
		};
	};
	auth_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Login'];
				'application/x-www-form-urlencoded': components['schemas']['Login'];
				'multipart/form-data': components['schemas']['Login'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SessionResponse'];
				};
			};
		};
	};
	locations_list: {
		parameters: {
			query?: {
				/** @description Which field to use when ordering the results. */
				order_by?: string;
				osm_address_city__like?: string;
				osm_address_country__like?: string;
				osm_name__like?: string;
				/** @description A page number within the paginated result set. */
				page?: number;
				price_count?: number;
				price_count__gte?: number;
				price_count__lte?: number;
				/** @description Number of results to return per page. */
				size?: number;
				/** @description * `OSM` - OSM
				 *     * `ONLINE` - ONLINE */
				type?: 'ONLINE' | 'OSM';
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PaginatedLocationList'];
				};
			};
		};
	};
	locations_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['LocationCreate'];
				'application/x-www-form-urlencoded': components['schemas']['LocationCreate'];
				'multipart/form-data': components['schemas']['LocationCreate'];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['LocationCreate'];
				};
			};
		};
	};
	locations_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Location. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Location'];
				};
			};
		};
	};
	locations_osm_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				osm_id: string;
				osm_type: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Location'];
				};
			};
		};
	};
	price_tags_list: {
		parameters: {
			query?: {
				created__gte?: string;
				created__lte?: string;
				/** @description Which field to use when ordering the results. */
				order_by?: string;
				/** @description A page number within the paginated result set. */
				page?: number;
				prediction_count?: number;
				prediction_count__gte?: number;
				prediction_count__lte?: number;
				proof__owner?: string;
				proof__ready_for_price_tag_validation?: boolean;
				/** @description The proof this price tag belongs to */
				proof_id?: number;
				/** @description Number of results to return per page. */
				size?: number;
				/** @description The annotation status
				 *
				 *     * `0` - deleted
				 *     * `1` - linked_to_price
				 *     * `2` - not_readable
				 *     * `3` - truncated
				 *     * `4` - not_price_tag */
				status?: 0 | 1 | 2 | 3 | 4 | null;
				status__isnull?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PaginatedPriceTagFullList'];
				};
			};
		};
	};
	price_tags_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['PriceTagCreate'];
				'application/x-www-form-urlencoded': components['schemas']['PriceTagCreate'];
				'multipart/form-data': components['schemas']['PriceTagCreate'];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PriceTagCreate'];
				};
			};
		};
	};
	price_tags_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Price Tag. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PriceTagFull'];
				};
			};
		};
	};
	price_tags_destroy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Price Tag. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description No response body */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	price_tags_partial_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Price Tag. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['PatchedPriceTagUpdate'];
				'application/x-www-form-urlencoded': components['schemas']['PatchedPriceTagUpdate'];
				'multipart/form-data': components['schemas']['PatchedPriceTagUpdate'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PriceTagUpdate'];
				};
			};
		};
	};
	prices_list: {
		parameters: {
			query?: {
				category_tag?: string;
				created__gte?: string;
				created__lte?: string;
				/** @description * `ADP` - ADP
				 *     * `AED` - AED
				 *     * `AFA` - AFA
				 *     * `AFN` - AFN
				 *     * `ALK` - ALK
				 *     * `ALL` - ALL
				 *     * `AMD` - AMD
				 *     * `ANG` - ANG
				 *     * `AOA` - AOA
				 *     * `AOK` - AOK
				 *     * `AON` - AON
				 *     * `AOR` - AOR
				 *     * `ARA` - ARA
				 *     * `ARL` - ARL
				 *     * `ARM` - ARM
				 *     * `ARP` - ARP
				 *     * `ARS` - ARS
				 *     * `ATS` - ATS
				 *     * `AUD` - AUD
				 *     * `AWG` - AWG
				 *     * `AZM` - AZM
				 *     * `AZN` - AZN
				 *     * `BAD` - BAD
				 *     * `BAM` - BAM
				 *     * `BAN` - BAN
				 *     * `BBD` - BBD
				 *     * `BDT` - BDT
				 *     * `BEC` - BEC
				 *     * `BEF` - BEF
				 *     * `BEL` - BEL
				 *     * `BGL` - BGL
				 *     * `BGM` - BGM
				 *     * `BGN` - BGN
				 *     * `BGO` - BGO
				 *     * `BHD` - BHD
				 *     * `BIF` - BIF
				 *     * `BMD` - BMD
				 *     * `BND` - BND
				 *     * `BOB` - BOB
				 *     * `BOL` - BOL
				 *     * `BOP` - BOP
				 *     * `BOV` - BOV
				 *     * `BRB` - BRB
				 *     * `BRC` - BRC
				 *     * `BRE` - BRE
				 *     * `BRL` - BRL
				 *     * `BRN` - BRN
				 *     * `BRR` - BRR
				 *     * `BRZ` - BRZ
				 *     * `BSD` - BSD
				 *     * `BTN` - BTN
				 *     * `BUK` - BUK
				 *     * `BWP` - BWP
				 *     * `BYB` - BYB
				 *     * `BYN` - BYN
				 *     * `BYR` - BYR
				 *     * `BZD` - BZD
				 *     * `CAD` - CAD
				 *     * `CDF` - CDF
				 *     * `CHE` - CHE
				 *     * `CHF` - CHF
				 *     * `CHW` - CHW
				 *     * `CLE` - CLE
				 *     * `CLF` - CLF
				 *     * `CLP` - CLP
				 *     * `CNH` - CNH
				 *     * `CNX` - CNX
				 *     * `CNY` - CNY
				 *     * `COP` - COP
				 *     * `COU` - COU
				 *     * `CRC` - CRC
				 *     * `CSD` - CSD
				 *     * `CSK` - CSK
				 *     * `CUC` - CUC
				 *     * `CUP` - CUP
				 *     * `CVE` - CVE
				 *     * `CYP` - CYP
				 *     * `CZK` - CZK
				 *     * `DDM` - DDM
				 *     * `DEM` - DEM
				 *     * `DJF` - DJF
				 *     * `DKK` - DKK
				 *     * `DOP` - DOP
				 *     * `DZD` - DZD
				 *     * `ECS` - ECS
				 *     * `ECV` - ECV
				 *     * `EEK` - EEK
				 *     * `EGP` - EGP
				 *     * `ERN` - ERN
				 *     * `ESA` - ESA
				 *     * `ESB` - ESB
				 *     * `ESP` - ESP
				 *     * `ETB` - ETB
				 *     * `EUR` - EUR
				 *     * `FIM` - FIM
				 *     * `FJD` - FJD
				 *     * `FKP` - FKP
				 *     * `FRF` - FRF
				 *     * `GBP` - GBP
				 *     * `GEK` - GEK
				 *     * `GEL` - GEL
				 *     * `GHC` - GHC
				 *     * `GHS` - GHS
				 *     * `GIP` - GIP
				 *     * `GMD` - GMD
				 *     * `GNF` - GNF
				 *     * `GNS` - GNS
				 *     * `GQE` - GQE
				 *     * `GRD` - GRD
				 *     * `GTQ` - GTQ
				 *     * `GWE` - GWE
				 *     * `GWP` - GWP
				 *     * `GYD` - GYD
				 *     * `HKD` - HKD
				 *     * `HNL` - HNL
				 *     * `HRD` - HRD
				 *     * `HRK` - HRK
				 *     * `HTG` - HTG
				 *     * `HUF` - HUF
				 *     * `IDR` - IDR
				 *     * `IEP` - IEP
				 *     * `ILP` - ILP
				 *     * `ILR` - ILR
				 *     * `ILS` - ILS
				 *     * `INR` - INR
				 *     * `IQD` - IQD
				 *     * `IRR` - IRR
				 *     * `ISJ` - ISJ
				 *     * `ISK` - ISK
				 *     * `ITL` - ITL
				 *     * `JMD` - JMD
				 *     * `JOD` - JOD
				 *     * `JPY` - JPY
				 *     * `KES` - KES
				 *     * `KGS` - KGS
				 *     * `KHR` - KHR
				 *     * `KMF` - KMF
				 *     * `KPW` - KPW
				 *     * `KRH` - KRH
				 *     * `KRO` - KRO
				 *     * `KRW` - KRW
				 *     * `KWD` - KWD
				 *     * `KYD` - KYD
				 *     * `KZT` - KZT
				 *     * `LAK` - LAK
				 *     * `LBP` - LBP
				 *     * `LKR` - LKR
				 *     * `LRD` - LRD
				 *     * `LSL` - LSL
				 *     * `LTL` - LTL
				 *     * `LTT` - LTT
				 *     * `LUC` - LUC
				 *     * `LUF` - LUF
				 *     * `LUL` - LUL
				 *     * `LVL` - LVL
				 *     * `LVR` - LVR
				 *     * `LYD` - LYD
				 *     * `MAD` - MAD
				 *     * `MAF` - MAF
				 *     * `MCF` - MCF
				 *     * `MDC` - MDC
				 *     * `MDL` - MDL
				 *     * `MGA` - MGA
				 *     * `MGF` - MGF
				 *     * `MKD` - MKD
				 *     * `MKN` - MKN
				 *     * `MLF` - MLF
				 *     * `MMK` - MMK
				 *     * `MNT` - MNT
				 *     * `MOP` - MOP
				 *     * `MRO` - MRO
				 *     * `MRU` - MRU
				 *     * `MTL` - MTL
				 *     * `MTP` - MTP
				 *     * `MUR` - MUR
				 *     * `MVP` - MVP
				 *     * `MVR` - MVR
				 *     * `MWK` - MWK
				 *     * `MXN` - MXN
				 *     * `MXP` - MXP
				 *     * `MXV` - MXV
				 *     * `MYR` - MYR
				 *     * `MZE` - MZE
				 *     * `MZM` - MZM
				 *     * `MZN` - MZN
				 *     * `NAD` - NAD
				 *     * `NGN` - NGN
				 *     * `NIC` - NIC
				 *     * `NIO` - NIO
				 *     * `NLG` - NLG
				 *     * `NOK` - NOK
				 *     * `NPR` - NPR
				 *     * `NZD` - NZD
				 *     * `OMR` - OMR
				 *     * `PAB` - PAB
				 *     * `PEI` - PEI
				 *     * `PEN` - PEN
				 *     * `PES` - PES
				 *     * `PGK` - PGK
				 *     * `PHP` - PHP
				 *     * `PKR` - PKR
				 *     * `PLN` - PLN
				 *     * `PLZ` - PLZ
				 *     * `PTE` - PTE
				 *     * `PYG` - PYG
				 *     * `QAR` - QAR
				 *     * `RHD` - RHD
				 *     * `ROL` - ROL
				 *     * `RON` - RON
				 *     * `RSD` - RSD
				 *     * `RUB` - RUB
				 *     * `RUR` - RUR
				 *     * `RWF` - RWF
				 *     * `SAR` - SAR
				 *     * `SBD` - SBD
				 *     * `SCR` - SCR
				 *     * `SDD` - SDD
				 *     * `SDG` - SDG
				 *     * `SDP` - SDP
				 *     * `SEK` - SEK
				 *     * `SGD` - SGD
				 *     * `SHP` - SHP
				 *     * `SIT` - SIT
				 *     * `SKK` - SKK
				 *     * `SLE` - SLE
				 *     * `SLL` - SLL
				 *     * `SOS` - SOS
				 *     * `SRD` - SRD
				 *     * `SRG` - SRG
				 *     * `SSP` - SSP
				 *     * `STD` - STD
				 *     * `STN` - STN
				 *     * `SUR` - SUR
				 *     * `SVC` - SVC
				 *     * `SYP` - SYP
				 *     * `SZL` - SZL
				 *     * `THB` - THB
				 *     * `TJR` - TJR
				 *     * `TJS` - TJS
				 *     * `TMM` - TMM
				 *     * `TMT` - TMT
				 *     * `TND` - TND
				 *     * `TOP` - TOP
				 *     * `TPE` - TPE
				 *     * `TRL` - TRL
				 *     * `TRY` - TRY
				 *     * `TTD` - TTD
				 *     * `TWD` - TWD
				 *     * `TZS` - TZS
				 *     * `UAH` - UAH
				 *     * `UAK` - UAK
				 *     * `UGS` - UGS
				 *     * `UGX` - UGX
				 *     * `USD` - USD
				 *     * `USN` - USN
				 *     * `USS` - USS
				 *     * `UYI` - UYI
				 *     * `UYP` - UYP
				 *     * `UYU` - UYU
				 *     * `UYW` - UYW
				 *     * `UZS` - UZS
				 *     * `VEB` - VEB
				 *     * `VED` - VED
				 *     * `VEF` - VEF
				 *     * `VES` - VES
				 *     * `VND` - VND
				 *     * `VNN` - VNN
				 *     * `VUV` - VUV
				 *     * `WST` - WST
				 *     * `XAF` - XAF
				 *     * `XAG` - XAG
				 *     * `XAU` - XAU
				 *     * `XBA` - XBA
				 *     * `XBB` - XBB
				 *     * `XBC` - XBC
				 *     * `XBD` - XBD
				 *     * `XCD` - XCD
				 *     * `XDR` - XDR
				 *     * `XEU` - XEU
				 *     * `XFO` - XFO
				 *     * `XFU` - XFU
				 *     * `XOF` - XOF
				 *     * `XPD` - XPD
				 *     * `XPF` - XPF
				 *     * `XPT` - XPT
				 *     * `XRE` - XRE
				 *     * `XSU` - XSU
				 *     * `XTS` - XTS
				 *     * `XUA` - XUA
				 *     * `XXX` - XXX
				 *     * `YDD` - YDD
				 *     * `YER` - YER
				 *     * `YUD` - YUD
				 *     * `YUM` - YUM
				 *     * `YUN` - YUN
				 *     * `YUR` - YUR
				 *     * `ZAL` - ZAL
				 *     * `ZAR` - ZAR
				 *     * `ZMK` - ZMK
				 *     * `ZMW` - ZMW
				 *     * `ZRN` - ZRN
				 *     * `ZRZ` - ZRZ
				 *     * `ZWD` - ZWD
				 *     * `ZWL` - ZWL
				 *     * `ZWR` - ZWR */
				currency?:
					| 'ADP'
					| 'AED'
					| 'AFA'
					| 'AFN'
					| 'ALK'
					| 'ALL'
					| 'AMD'
					| 'ANG'
					| 'AOA'
					| 'AOK'
					| 'AON'
					| 'AOR'
					| 'ARA'
					| 'ARL'
					| 'ARM'
					| 'ARP'
					| 'ARS'
					| 'ATS'
					| 'AUD'
					| 'AWG'
					| 'AZM'
					| 'AZN'
					| 'BAD'
					| 'BAM'
					| 'BAN'
					| 'BBD'
					| 'BDT'
					| 'BEC'
					| 'BEF'
					| 'BEL'
					| 'BGL'
					| 'BGM'
					| 'BGN'
					| 'BGO'
					| 'BHD'
					| 'BIF'
					| 'BMD'
					| 'BND'
					| 'BOB'
					| 'BOL'
					| 'BOP'
					| 'BOV'
					| 'BRB'
					| 'BRC'
					| 'BRE'
					| 'BRL'
					| 'BRN'
					| 'BRR'
					| 'BRZ'
					| 'BSD'
					| 'BTN'
					| 'BUK'
					| 'BWP'
					| 'BYB'
					| 'BYN'
					| 'BYR'
					| 'BZD'
					| 'CAD'
					| 'CDF'
					| 'CHE'
					| 'CHF'
					| 'CHW'
					| 'CLE'
					| 'CLF'
					| 'CLP'
					| 'CNH'
					| 'CNX'
					| 'CNY'
					| 'COP'
					| 'COU'
					| 'CRC'
					| 'CSD'
					| 'CSK'
					| 'CUC'
					| 'CUP'
					| 'CVE'
					| 'CYP'
					| 'CZK'
					| 'DDM'
					| 'DEM'
					| 'DJF'
					| 'DKK'
					| 'DOP'
					| 'DZD'
					| 'ECS'
					| 'ECV'
					| 'EEK'
					| 'EGP'
					| 'ERN'
					| 'ESA'
					| 'ESB'
					| 'ESP'
					| 'ETB'
					| 'EUR'
					| 'FIM'
					| 'FJD'
					| 'FKP'
					| 'FRF'
					| 'GBP'
					| 'GEK'
					| 'GEL'
					| 'GHC'
					| 'GHS'
					| 'GIP'
					| 'GMD'
					| 'GNF'
					| 'GNS'
					| 'GQE'
					| 'GRD'
					| 'GTQ'
					| 'GWE'
					| 'GWP'
					| 'GYD'
					| 'HKD'
					| 'HNL'
					| 'HRD'
					| 'HRK'
					| 'HTG'
					| 'HUF'
					| 'IDR'
					| 'IEP'
					| 'ILP'
					| 'ILR'
					| 'ILS'
					| 'INR'
					| 'IQD'
					| 'IRR'
					| 'ISJ'
					| 'ISK'
					| 'ITL'
					| 'JMD'
					| 'JOD'
					| 'JPY'
					| 'KES'
					| 'KGS'
					| 'KHR'
					| 'KMF'
					| 'KPW'
					| 'KRH'
					| 'KRO'
					| 'KRW'
					| 'KWD'
					| 'KYD'
					| 'KZT'
					| 'LAK'
					| 'LBP'
					| 'LKR'
					| 'LRD'
					| 'LSL'
					| 'LTL'
					| 'LTT'
					| 'LUC'
					| 'LUF'
					| 'LUL'
					| 'LVL'
					| 'LVR'
					| 'LYD'
					| 'MAD'
					| 'MAF'
					| 'MCF'
					| 'MDC'
					| 'MDL'
					| 'MGA'
					| 'MGF'
					| 'MKD'
					| 'MKN'
					| 'MLF'
					| 'MMK'
					| 'MNT'
					| 'MOP'
					| 'MRO'
					| 'MRU'
					| 'MTL'
					| 'MTP'
					| 'MUR'
					| 'MVP'
					| 'MVR'
					| 'MWK'
					| 'MXN'
					| 'MXP'
					| 'MXV'
					| 'MYR'
					| 'MZE'
					| 'MZM'
					| 'MZN'
					| 'NAD'
					| 'NGN'
					| 'NIC'
					| 'NIO'
					| 'NLG'
					| 'NOK'
					| 'NPR'
					| 'NZD'
					| 'OMR'
					| 'PAB'
					| 'PEI'
					| 'PEN'
					| 'PES'
					| 'PGK'
					| 'PHP'
					| 'PKR'
					| 'PLN'
					| 'PLZ'
					| 'PTE'
					| 'PYG'
					| 'QAR'
					| 'RHD'
					| 'ROL'
					| 'RON'
					| 'RSD'
					| 'RUB'
					| 'RUR'
					| 'RWF'
					| 'SAR'
					| 'SBD'
					| 'SCR'
					| 'SDD'
					| 'SDG'
					| 'SDP'
					| 'SEK'
					| 'SGD'
					| 'SHP'
					| 'SIT'
					| 'SKK'
					| 'SLE'
					| 'SLL'
					| 'SOS'
					| 'SRD'
					| 'SRG'
					| 'SSP'
					| 'STD'
					| 'STN'
					| 'SUR'
					| 'SVC'
					| 'SYP'
					| 'SZL'
					| 'THB'
					| 'TJR'
					| 'TJS'
					| 'TMM'
					| 'TMT'
					| 'TND'
					| 'TOP'
					| 'TPE'
					| 'TRL'
					| 'TRY'
					| 'TTD'
					| 'TWD'
					| 'TZS'
					| 'UAH'
					| 'UAK'
					| 'UGS'
					| 'UGX'
					| 'USD'
					| 'USN'
					| 'USS'
					| 'UYI'
					| 'UYP'
					| 'UYU'
					| 'UYW'
					| 'UZS'
					| 'VEB'
					| 'VED'
					| 'VEF'
					| 'VES'
					| 'VND'
					| 'VNN'
					| 'VUV'
					| 'WST'
					| 'XAF'
					| 'XAG'
					| 'XAU'
					| 'XBA'
					| 'XBB'
					| 'XBC'
					| 'XBD'
					| 'XCD'
					| 'XDR'
					| 'XEU'
					| 'XFO'
					| 'XFU'
					| 'XOF'
					| 'XPD'
					| 'XPF'
					| 'XPT'
					| 'XRE'
					| 'XSU'
					| 'XTS'
					| 'XUA'
					| 'XXX'
					| 'YDD'
					| 'YER'
					| 'YUD'
					| 'YUM'
					| 'YUN'
					| 'YUR'
					| 'ZAL'
					| 'ZAR'
					| 'ZMK'
					| 'ZMW'
					| 'ZRN'
					| 'ZRZ'
					| 'ZWD'
					| 'ZWL'
					| 'ZWR'
					| null;
				date?: string;
				date__gt?: string;
				date__gte?: string;
				date__lt?: string;
				date__lte?: string;
				date__month?: number;
				date__year?: number;
				/** @description * `QUANTITY` - QUANTITY
				 *     * `SALE` - SALE
				 *     * `SEASONAL` - SEASONAL
				 *     * `LOYALTY_PROGRAM` - LOYALTY_PROGRAM
				 *     * `EXPIRES_SOON` - EXPIRES_SOON
				 *     * `PICK_IT_YOURSELF` - PICK_IT_YOURSELF
				 *     * `SECOND_HAND` - SECOND_HAND
				 *     * `OTHER` - OTHER */
				discount_type?:
					| 'EXPIRES_SOON'
					| 'LOYALTY_PROGRAM'
					| 'OTHER'
					| 'PICK_IT_YOURSELF'
					| 'QUANTITY'
					| 'SALE'
					| 'SEASONAL'
					| 'SECOND_HAND'
					| null;
				labels_tags__contains?: string;
				location_id?: number | null;
				location_id__isnull?: boolean;
				location_osm_id?: number;
				/** @description * `NODE` - NODE
				 *     * `WAY` - WAY
				 *     * `RELATION` - RELATION */
				location_osm_type?: 'NODE' | 'RELATION' | 'WAY' | null;
				/** @description Which field to use when ordering the results. */
				order_by?: string;
				origins_tags__contains?: string;
				owner?: string;
				/** @description A page number within the paginated result set. */
				page?: number;
				price?: number;
				price__gt?: number;
				price__gte?: number;
				price__lt?: number;
				price__lte?: number;
				price_is_discounted?: boolean;
				product__categories_tags__contains?: string;
				product_code?: string;
				product_id?: number | null;
				product_id__isnull?: boolean;
				/** @description * `PRICE_TAG` - PRICE_TAG
				 *     * `RECEIPT` - RECEIPT
				 *     * `GDPR_REQUEST` - GDPR_REQUEST
				 *     * `SHOP_IMPORT` - SHOP_IMPORT */
				proof__type?: ('GDPR_REQUEST' | 'PRICE_TAG' | 'RECEIPT' | 'SHOP_IMPORT')[];
				proof_id?: number | null;
				proof_id__isnull?: boolean;
				/** @description Number of results to return per page. */
				size?: number;
				/** @description * `PRODUCT` - PRODUCT
				 *     * `CATEGORY` - CATEGORY */
				type?: 'CATEGORY' | 'PRODUCT';
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PaginatedPriceFullList'];
				};
			};
		};
	};
	prices_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['PriceCreate'];
				'application/x-www-form-urlencoded': components['schemas']['PriceCreate'];
				'multipart/form-data': components['schemas']['PriceCreate'];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PriceCreate'];
				};
			};
		};
	};
	prices_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Price. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PriceFull'];
				};
			};
		};
	};
	prices_destroy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Price. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description No response body */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	prices_partial_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Price. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['PatchedPriceUpdate'];
				'application/x-www-form-urlencoded': components['schemas']['PatchedPriceUpdate'];
				'multipart/form-data': components['schemas']['PatchedPriceUpdate'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PriceUpdate'];
				};
			};
		};
	};
	prices_stats_retrieve: {
		parameters: {
			query?: {
				category_tag?: string;
				created__gte?: string;
				created__lte?: string;
				/** @description * `ADP` - ADP
				 *     * `AED` - AED
				 *     * `AFA` - AFA
				 *     * `AFN` - AFN
				 *     * `ALK` - ALK
				 *     * `ALL` - ALL
				 *     * `AMD` - AMD
				 *     * `ANG` - ANG
				 *     * `AOA` - AOA
				 *     * `AOK` - AOK
				 *     * `AON` - AON
				 *     * `AOR` - AOR
				 *     * `ARA` - ARA
				 *     * `ARL` - ARL
				 *     * `ARM` - ARM
				 *     * `ARP` - ARP
				 *     * `ARS` - ARS
				 *     * `ATS` - ATS
				 *     * `AUD` - AUD
				 *     * `AWG` - AWG
				 *     * `AZM` - AZM
				 *     * `AZN` - AZN
				 *     * `BAD` - BAD
				 *     * `BAM` - BAM
				 *     * `BAN` - BAN
				 *     * `BBD` - BBD
				 *     * `BDT` - BDT
				 *     * `BEC` - BEC
				 *     * `BEF` - BEF
				 *     * `BEL` - BEL
				 *     * `BGL` - BGL
				 *     * `BGM` - BGM
				 *     * `BGN` - BGN
				 *     * `BGO` - BGO
				 *     * `BHD` - BHD
				 *     * `BIF` - BIF
				 *     * `BMD` - BMD
				 *     * `BND` - BND
				 *     * `BOB` - BOB
				 *     * `BOL` - BOL
				 *     * `BOP` - BOP
				 *     * `BOV` - BOV
				 *     * `BRB` - BRB
				 *     * `BRC` - BRC
				 *     * `BRE` - BRE
				 *     * `BRL` - BRL
				 *     * `BRN` - BRN
				 *     * `BRR` - BRR
				 *     * `BRZ` - BRZ
				 *     * `BSD` - BSD
				 *     * `BTN` - BTN
				 *     * `BUK` - BUK
				 *     * `BWP` - BWP
				 *     * `BYB` - BYB
				 *     * `BYN` - BYN
				 *     * `BYR` - BYR
				 *     * `BZD` - BZD
				 *     * `CAD` - CAD
				 *     * `CDF` - CDF
				 *     * `CHE` - CHE
				 *     * `CHF` - CHF
				 *     * `CHW` - CHW
				 *     * `CLE` - CLE
				 *     * `CLF` - CLF
				 *     * `CLP` - CLP
				 *     * `CNH` - CNH
				 *     * `CNX` - CNX
				 *     * `CNY` - CNY
				 *     * `COP` - COP
				 *     * `COU` - COU
				 *     * `CRC` - CRC
				 *     * `CSD` - CSD
				 *     * `CSK` - CSK
				 *     * `CUC` - CUC
				 *     * `CUP` - CUP
				 *     * `CVE` - CVE
				 *     * `CYP` - CYP
				 *     * `CZK` - CZK
				 *     * `DDM` - DDM
				 *     * `DEM` - DEM
				 *     * `DJF` - DJF
				 *     * `DKK` - DKK
				 *     * `DOP` - DOP
				 *     * `DZD` - DZD
				 *     * `ECS` - ECS
				 *     * `ECV` - ECV
				 *     * `EEK` - EEK
				 *     * `EGP` - EGP
				 *     * `ERN` - ERN
				 *     * `ESA` - ESA
				 *     * `ESB` - ESB
				 *     * `ESP` - ESP
				 *     * `ETB` - ETB
				 *     * `EUR` - EUR
				 *     * `FIM` - FIM
				 *     * `FJD` - FJD
				 *     * `FKP` - FKP
				 *     * `FRF` - FRF
				 *     * `GBP` - GBP
				 *     * `GEK` - GEK
				 *     * `GEL` - GEL
				 *     * `GHC` - GHC
				 *     * `GHS` - GHS
				 *     * `GIP` - GIP
				 *     * `GMD` - GMD
				 *     * `GNF` - GNF
				 *     * `GNS` - GNS
				 *     * `GQE` - GQE
				 *     * `GRD` - GRD
				 *     * `GTQ` - GTQ
				 *     * `GWE` - GWE
				 *     * `GWP` - GWP
				 *     * `GYD` - GYD
				 *     * `HKD` - HKD
				 *     * `HNL` - HNL
				 *     * `HRD` - HRD
				 *     * `HRK` - HRK
				 *     * `HTG` - HTG
				 *     * `HUF` - HUF
				 *     * `IDR` - IDR
				 *     * `IEP` - IEP
				 *     * `ILP` - ILP
				 *     * `ILR` - ILR
				 *     * `ILS` - ILS
				 *     * `INR` - INR
				 *     * `IQD` - IQD
				 *     * `IRR` - IRR
				 *     * `ISJ` - ISJ
				 *     * `ISK` - ISK
				 *     * `ITL` - ITL
				 *     * `JMD` - JMD
				 *     * `JOD` - JOD
				 *     * `JPY` - JPY
				 *     * `KES` - KES
				 *     * `KGS` - KGS
				 *     * `KHR` - KHR
				 *     * `KMF` - KMF
				 *     * `KPW` - KPW
				 *     * `KRH` - KRH
				 *     * `KRO` - KRO
				 *     * `KRW` - KRW
				 *     * `KWD` - KWD
				 *     * `KYD` - KYD
				 *     * `KZT` - KZT
				 *     * `LAK` - LAK
				 *     * `LBP` - LBP
				 *     * `LKR` - LKR
				 *     * `LRD` - LRD
				 *     * `LSL` - LSL
				 *     * `LTL` - LTL
				 *     * `LTT` - LTT
				 *     * `LUC` - LUC
				 *     * `LUF` - LUF
				 *     * `LUL` - LUL
				 *     * `LVL` - LVL
				 *     * `LVR` - LVR
				 *     * `LYD` - LYD
				 *     * `MAD` - MAD
				 *     * `MAF` - MAF
				 *     * `MCF` - MCF
				 *     * `MDC` - MDC
				 *     * `MDL` - MDL
				 *     * `MGA` - MGA
				 *     * `MGF` - MGF
				 *     * `MKD` - MKD
				 *     * `MKN` - MKN
				 *     * `MLF` - MLF
				 *     * `MMK` - MMK
				 *     * `MNT` - MNT
				 *     * `MOP` - MOP
				 *     * `MRO` - MRO
				 *     * `MRU` - MRU
				 *     * `MTL` - MTL
				 *     * `MTP` - MTP
				 *     * `MUR` - MUR
				 *     * `MVP` - MVP
				 *     * `MVR` - MVR
				 *     * `MWK` - MWK
				 *     * `MXN` - MXN
				 *     * `MXP` - MXP
				 *     * `MXV` - MXV
				 *     * `MYR` - MYR
				 *     * `MZE` - MZE
				 *     * `MZM` - MZM
				 *     * `MZN` - MZN
				 *     * `NAD` - NAD
				 *     * `NGN` - NGN
				 *     * `NIC` - NIC
				 *     * `NIO` - NIO
				 *     * `NLG` - NLG
				 *     * `NOK` - NOK
				 *     * `NPR` - NPR
				 *     * `NZD` - NZD
				 *     * `OMR` - OMR
				 *     * `PAB` - PAB
				 *     * `PEI` - PEI
				 *     * `PEN` - PEN
				 *     * `PES` - PES
				 *     * `PGK` - PGK
				 *     * `PHP` - PHP
				 *     * `PKR` - PKR
				 *     * `PLN` - PLN
				 *     * `PLZ` - PLZ
				 *     * `PTE` - PTE
				 *     * `PYG` - PYG
				 *     * `QAR` - QAR
				 *     * `RHD` - RHD
				 *     * `ROL` - ROL
				 *     * `RON` - RON
				 *     * `RSD` - RSD
				 *     * `RUB` - RUB
				 *     * `RUR` - RUR
				 *     * `RWF` - RWF
				 *     * `SAR` - SAR
				 *     * `SBD` - SBD
				 *     * `SCR` - SCR
				 *     * `SDD` - SDD
				 *     * `SDG` - SDG
				 *     * `SDP` - SDP
				 *     * `SEK` - SEK
				 *     * `SGD` - SGD
				 *     * `SHP` - SHP
				 *     * `SIT` - SIT
				 *     * `SKK` - SKK
				 *     * `SLE` - SLE
				 *     * `SLL` - SLL
				 *     * `SOS` - SOS
				 *     * `SRD` - SRD
				 *     * `SRG` - SRG
				 *     * `SSP` - SSP
				 *     * `STD` - STD
				 *     * `STN` - STN
				 *     * `SUR` - SUR
				 *     * `SVC` - SVC
				 *     * `SYP` - SYP
				 *     * `SZL` - SZL
				 *     * `THB` - THB
				 *     * `TJR` - TJR
				 *     * `TJS` - TJS
				 *     * `TMM` - TMM
				 *     * `TMT` - TMT
				 *     * `TND` - TND
				 *     * `TOP` - TOP
				 *     * `TPE` - TPE
				 *     * `TRL` - TRL
				 *     * `TRY` - TRY
				 *     * `TTD` - TTD
				 *     * `TWD` - TWD
				 *     * `TZS` - TZS
				 *     * `UAH` - UAH
				 *     * `UAK` - UAK
				 *     * `UGS` - UGS
				 *     * `UGX` - UGX
				 *     * `USD` - USD
				 *     * `USN` - USN
				 *     * `USS` - USS
				 *     * `UYI` - UYI
				 *     * `UYP` - UYP
				 *     * `UYU` - UYU
				 *     * `UYW` - UYW
				 *     * `UZS` - UZS
				 *     * `VEB` - VEB
				 *     * `VED` - VED
				 *     * `VEF` - VEF
				 *     * `VES` - VES
				 *     * `VND` - VND
				 *     * `VNN` - VNN
				 *     * `VUV` - VUV
				 *     * `WST` - WST
				 *     * `XAF` - XAF
				 *     * `XAG` - XAG
				 *     * `XAU` - XAU
				 *     * `XBA` - XBA
				 *     * `XBB` - XBB
				 *     * `XBC` - XBC
				 *     * `XBD` - XBD
				 *     * `XCD` - XCD
				 *     * `XDR` - XDR
				 *     * `XEU` - XEU
				 *     * `XFO` - XFO
				 *     * `XFU` - XFU
				 *     * `XOF` - XOF
				 *     * `XPD` - XPD
				 *     * `XPF` - XPF
				 *     * `XPT` - XPT
				 *     * `XRE` - XRE
				 *     * `XSU` - XSU
				 *     * `XTS` - XTS
				 *     * `XUA` - XUA
				 *     * `XXX` - XXX
				 *     * `YDD` - YDD
				 *     * `YER` - YER
				 *     * `YUD` - YUD
				 *     * `YUM` - YUM
				 *     * `YUN` - YUN
				 *     * `YUR` - YUR
				 *     * `ZAL` - ZAL
				 *     * `ZAR` - ZAR
				 *     * `ZMK` - ZMK
				 *     * `ZMW` - ZMW
				 *     * `ZRN` - ZRN
				 *     * `ZRZ` - ZRZ
				 *     * `ZWD` - ZWD
				 *     * `ZWL` - ZWL
				 *     * `ZWR` - ZWR */
				currency?:
					| 'ADP'
					| 'AED'
					| 'AFA'
					| 'AFN'
					| 'ALK'
					| 'ALL'
					| 'AMD'
					| 'ANG'
					| 'AOA'
					| 'AOK'
					| 'AON'
					| 'AOR'
					| 'ARA'
					| 'ARL'
					| 'ARM'
					| 'ARP'
					| 'ARS'
					| 'ATS'
					| 'AUD'
					| 'AWG'
					| 'AZM'
					| 'AZN'
					| 'BAD'
					| 'BAM'
					| 'BAN'
					| 'BBD'
					| 'BDT'
					| 'BEC'
					| 'BEF'
					| 'BEL'
					| 'BGL'
					| 'BGM'
					| 'BGN'
					| 'BGO'
					| 'BHD'
					| 'BIF'
					| 'BMD'
					| 'BND'
					| 'BOB'
					| 'BOL'
					| 'BOP'
					| 'BOV'
					| 'BRB'
					| 'BRC'
					| 'BRE'
					| 'BRL'
					| 'BRN'
					| 'BRR'
					| 'BRZ'
					| 'BSD'
					| 'BTN'
					| 'BUK'
					| 'BWP'
					| 'BYB'
					| 'BYN'
					| 'BYR'
					| 'BZD'
					| 'CAD'
					| 'CDF'
					| 'CHE'
					| 'CHF'
					| 'CHW'
					| 'CLE'
					| 'CLF'
					| 'CLP'
					| 'CNH'
					| 'CNX'
					| 'CNY'
					| 'COP'
					| 'COU'
					| 'CRC'
					| 'CSD'
					| 'CSK'
					| 'CUC'
					| 'CUP'
					| 'CVE'
					| 'CYP'
					| 'CZK'
					| 'DDM'
					| 'DEM'
					| 'DJF'
					| 'DKK'
					| 'DOP'
					| 'DZD'
					| 'ECS'
					| 'ECV'
					| 'EEK'
					| 'EGP'
					| 'ERN'
					| 'ESA'
					| 'ESB'
					| 'ESP'
					| 'ETB'
					| 'EUR'
					| 'FIM'
					| 'FJD'
					| 'FKP'
					| 'FRF'
					| 'GBP'
					| 'GEK'
					| 'GEL'
					| 'GHC'
					| 'GHS'
					| 'GIP'
					| 'GMD'
					| 'GNF'
					| 'GNS'
					| 'GQE'
					| 'GRD'
					| 'GTQ'
					| 'GWE'
					| 'GWP'
					| 'GYD'
					| 'HKD'
					| 'HNL'
					| 'HRD'
					| 'HRK'
					| 'HTG'
					| 'HUF'
					| 'IDR'
					| 'IEP'
					| 'ILP'
					| 'ILR'
					| 'ILS'
					| 'INR'
					| 'IQD'
					| 'IRR'
					| 'ISJ'
					| 'ISK'
					| 'ITL'
					| 'JMD'
					| 'JOD'
					| 'JPY'
					| 'KES'
					| 'KGS'
					| 'KHR'
					| 'KMF'
					| 'KPW'
					| 'KRH'
					| 'KRO'
					| 'KRW'
					| 'KWD'
					| 'KYD'
					| 'KZT'
					| 'LAK'
					| 'LBP'
					| 'LKR'
					| 'LRD'
					| 'LSL'
					| 'LTL'
					| 'LTT'
					| 'LUC'
					| 'LUF'
					| 'LUL'
					| 'LVL'
					| 'LVR'
					| 'LYD'
					| 'MAD'
					| 'MAF'
					| 'MCF'
					| 'MDC'
					| 'MDL'
					| 'MGA'
					| 'MGF'
					| 'MKD'
					| 'MKN'
					| 'MLF'
					| 'MMK'
					| 'MNT'
					| 'MOP'
					| 'MRO'
					| 'MRU'
					| 'MTL'
					| 'MTP'
					| 'MUR'
					| 'MVP'
					| 'MVR'
					| 'MWK'
					| 'MXN'
					| 'MXP'
					| 'MXV'
					| 'MYR'
					| 'MZE'
					| 'MZM'
					| 'MZN'
					| 'NAD'
					| 'NGN'
					| 'NIC'
					| 'NIO'
					| 'NLG'
					| 'NOK'
					| 'NPR'
					| 'NZD'
					| 'OMR'
					| 'PAB'
					| 'PEI'
					| 'PEN'
					| 'PES'
					| 'PGK'
					| 'PHP'
					| 'PKR'
					| 'PLN'
					| 'PLZ'
					| 'PTE'
					| 'PYG'
					| 'QAR'
					| 'RHD'
					| 'ROL'
					| 'RON'
					| 'RSD'
					| 'RUB'
					| 'RUR'
					| 'RWF'
					| 'SAR'
					| 'SBD'
					| 'SCR'
					| 'SDD'
					| 'SDG'
					| 'SDP'
					| 'SEK'
					| 'SGD'
					| 'SHP'
					| 'SIT'
					| 'SKK'
					| 'SLE'
					| 'SLL'
					| 'SOS'
					| 'SRD'
					| 'SRG'
					| 'SSP'
					| 'STD'
					| 'STN'
					| 'SUR'
					| 'SVC'
					| 'SYP'
					| 'SZL'
					| 'THB'
					| 'TJR'
					| 'TJS'
					| 'TMM'
					| 'TMT'
					| 'TND'
					| 'TOP'
					| 'TPE'
					| 'TRL'
					| 'TRY'
					| 'TTD'
					| 'TWD'
					| 'TZS'
					| 'UAH'
					| 'UAK'
					| 'UGS'
					| 'UGX'
					| 'USD'
					| 'USN'
					| 'USS'
					| 'UYI'
					| 'UYP'
					| 'UYU'
					| 'UYW'
					| 'UZS'
					| 'VEB'
					| 'VED'
					| 'VEF'
					| 'VES'
					| 'VND'
					| 'VNN'
					| 'VUV'
					| 'WST'
					| 'XAF'
					| 'XAG'
					| 'XAU'
					| 'XBA'
					| 'XBB'
					| 'XBC'
					| 'XBD'
					| 'XCD'
					| 'XDR'
					| 'XEU'
					| 'XFO'
					| 'XFU'
					| 'XOF'
					| 'XPD'
					| 'XPF'
					| 'XPT'
					| 'XRE'
					| 'XSU'
					| 'XTS'
					| 'XUA'
					| 'XXX'
					| 'YDD'
					| 'YER'
					| 'YUD'
					| 'YUM'
					| 'YUN'
					| 'YUR'
					| 'ZAL'
					| 'ZAR'
					| 'ZMK'
					| 'ZMW'
					| 'ZRN'
					| 'ZRZ'
					| 'ZWD'
					| 'ZWL'
					| 'ZWR'
					| null;
				date?: string;
				date__gt?: string;
				date__gte?: string;
				date__lt?: string;
				date__lte?: string;
				date__month?: number;
				date__year?: number;
				/** @description * `QUANTITY` - QUANTITY
				 *     * `SALE` - SALE
				 *     * `SEASONAL` - SEASONAL
				 *     * `LOYALTY_PROGRAM` - LOYALTY_PROGRAM
				 *     * `EXPIRES_SOON` - EXPIRES_SOON
				 *     * `PICK_IT_YOURSELF` - PICK_IT_YOURSELF
				 *     * `SECOND_HAND` - SECOND_HAND
				 *     * `OTHER` - OTHER */
				discount_type?:
					| 'EXPIRES_SOON'
					| 'LOYALTY_PROGRAM'
					| 'OTHER'
					| 'PICK_IT_YOURSELF'
					| 'QUANTITY'
					| 'SALE'
					| 'SEASONAL'
					| 'SECOND_HAND'
					| null;
				labels_tags__contains?: string;
				location_id?: number | null;
				location_id__isnull?: boolean;
				location_osm_id?: number;
				/** @description * `NODE` - NODE
				 *     * `WAY` - WAY
				 *     * `RELATION` - RELATION */
				location_osm_type?: 'NODE' | 'RELATION' | 'WAY' | null;
				/** @description Which field to use when ordering the results. */
				order_by?: string;
				origins_tags__contains?: string;
				owner?: string;
				price?: number;
				price__gt?: number;
				price__gte?: number;
				price__lt?: number;
				price__lte?: number;
				price_is_discounted?: boolean;
				product__categories_tags__contains?: string;
				product_code?: string;
				product_id?: number | null;
				product_id__isnull?: boolean;
				/** @description * `PRICE_TAG` - PRICE_TAG
				 *     * `RECEIPT` - RECEIPT
				 *     * `GDPR_REQUEST` - GDPR_REQUEST
				 *     * `SHOP_IMPORT` - SHOP_IMPORT */
				proof__type?: ('GDPR_REQUEST' | 'PRICE_TAG' | 'RECEIPT' | 'SHOP_IMPORT')[];
				proof_id?: number | null;
				proof_id__isnull?: boolean;
				/** @description * `PRODUCT` - PRODUCT
				 *     * `CATEGORY` - CATEGORY */
				type?: 'CATEGORY' | 'PRODUCT';
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PriceStats'];
				};
			};
		};
	};
	products_list: {
		parameters: {
			query?: {
				brands__like?: string;
				brands_tags__contains?: string;
				categories_tags__contains?: string;
				code?: string;
				ecoscore_grade?: string;
				labels_tags__contains?: string;
				nova_group?: number;
				nutriscore_grade?: string;
				/** @description Which field to use when ordering the results. */
				order_by?: string;
				/** @description A page number within the paginated result set. */
				page?: number;
				price_count?: number;
				price_count__gte?: number;
				price_count__lte?: number;
				product_name__like?: string;
				/** @description Number of results to return per page. */
				size?: number;
				/** @description * `off` - off
				 *     * `obf` - obf
				 *     * `opff` - opff
				 *     * `opf` - opf
				 *     * `off_pro` - off_pro */
				source?: 'obf' | 'off' | 'off_pro' | 'opf' | 'opff' | null;
				unique_scans_n__gte?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PaginatedProductFullList'];
				};
			};
		};
	};
	products_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Product. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProductFull'];
				};
			};
		};
	};
	products_code_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				code: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProductFull'];
				};
			};
		};
	};
	proofs_list: {
		parameters: {
			query?: {
				created__gte?: string;
				created__lte?: string;
				/** @description * `ADP` - ADP
				 *     * `AED` - AED
				 *     * `AFA` - AFA
				 *     * `AFN` - AFN
				 *     * `ALK` - ALK
				 *     * `ALL` - ALL
				 *     * `AMD` - AMD
				 *     * `ANG` - ANG
				 *     * `AOA` - AOA
				 *     * `AOK` - AOK
				 *     * `AON` - AON
				 *     * `AOR` - AOR
				 *     * `ARA` - ARA
				 *     * `ARL` - ARL
				 *     * `ARM` - ARM
				 *     * `ARP` - ARP
				 *     * `ARS` - ARS
				 *     * `ATS` - ATS
				 *     * `AUD` - AUD
				 *     * `AWG` - AWG
				 *     * `AZM` - AZM
				 *     * `AZN` - AZN
				 *     * `BAD` - BAD
				 *     * `BAM` - BAM
				 *     * `BAN` - BAN
				 *     * `BBD` - BBD
				 *     * `BDT` - BDT
				 *     * `BEC` - BEC
				 *     * `BEF` - BEF
				 *     * `BEL` - BEL
				 *     * `BGL` - BGL
				 *     * `BGM` - BGM
				 *     * `BGN` - BGN
				 *     * `BGO` - BGO
				 *     * `BHD` - BHD
				 *     * `BIF` - BIF
				 *     * `BMD` - BMD
				 *     * `BND` - BND
				 *     * `BOB` - BOB
				 *     * `BOL` - BOL
				 *     * `BOP` - BOP
				 *     * `BOV` - BOV
				 *     * `BRB` - BRB
				 *     * `BRC` - BRC
				 *     * `BRE` - BRE
				 *     * `BRL` - BRL
				 *     * `BRN` - BRN
				 *     * `BRR` - BRR
				 *     * `BRZ` - BRZ
				 *     * `BSD` - BSD
				 *     * `BTN` - BTN
				 *     * `BUK` - BUK
				 *     * `BWP` - BWP
				 *     * `BYB` - BYB
				 *     * `BYN` - BYN
				 *     * `BYR` - BYR
				 *     * `BZD` - BZD
				 *     * `CAD` - CAD
				 *     * `CDF` - CDF
				 *     * `CHE` - CHE
				 *     * `CHF` - CHF
				 *     * `CHW` - CHW
				 *     * `CLE` - CLE
				 *     * `CLF` - CLF
				 *     * `CLP` - CLP
				 *     * `CNH` - CNH
				 *     * `CNX` - CNX
				 *     * `CNY` - CNY
				 *     * `COP` - COP
				 *     * `COU` - COU
				 *     * `CRC` - CRC
				 *     * `CSD` - CSD
				 *     * `CSK` - CSK
				 *     * `CUC` - CUC
				 *     * `CUP` - CUP
				 *     * `CVE` - CVE
				 *     * `CYP` - CYP
				 *     * `CZK` - CZK
				 *     * `DDM` - DDM
				 *     * `DEM` - DEM
				 *     * `DJF` - DJF
				 *     * `DKK` - DKK
				 *     * `DOP` - DOP
				 *     * `DZD` - DZD
				 *     * `ECS` - ECS
				 *     * `ECV` - ECV
				 *     * `EEK` - EEK
				 *     * `EGP` - EGP
				 *     * `ERN` - ERN
				 *     * `ESA` - ESA
				 *     * `ESB` - ESB
				 *     * `ESP` - ESP
				 *     * `ETB` - ETB
				 *     * `EUR` - EUR
				 *     * `FIM` - FIM
				 *     * `FJD` - FJD
				 *     * `FKP` - FKP
				 *     * `FRF` - FRF
				 *     * `GBP` - GBP
				 *     * `GEK` - GEK
				 *     * `GEL` - GEL
				 *     * `GHC` - GHC
				 *     * `GHS` - GHS
				 *     * `GIP` - GIP
				 *     * `GMD` - GMD
				 *     * `GNF` - GNF
				 *     * `GNS` - GNS
				 *     * `GQE` - GQE
				 *     * `GRD` - GRD
				 *     * `GTQ` - GTQ
				 *     * `GWE` - GWE
				 *     * `GWP` - GWP
				 *     * `GYD` - GYD
				 *     * `HKD` - HKD
				 *     * `HNL` - HNL
				 *     * `HRD` - HRD
				 *     * `HRK` - HRK
				 *     * `HTG` - HTG
				 *     * `HUF` - HUF
				 *     * `IDR` - IDR
				 *     * `IEP` - IEP
				 *     * `ILP` - ILP
				 *     * `ILR` - ILR
				 *     * `ILS` - ILS
				 *     * `INR` - INR
				 *     * `IQD` - IQD
				 *     * `IRR` - IRR
				 *     * `ISJ` - ISJ
				 *     * `ISK` - ISK
				 *     * `ITL` - ITL
				 *     * `JMD` - JMD
				 *     * `JOD` - JOD
				 *     * `JPY` - JPY
				 *     * `KES` - KES
				 *     * `KGS` - KGS
				 *     * `KHR` - KHR
				 *     * `KMF` - KMF
				 *     * `KPW` - KPW
				 *     * `KRH` - KRH
				 *     * `KRO` - KRO
				 *     * `KRW` - KRW
				 *     * `KWD` - KWD
				 *     * `KYD` - KYD
				 *     * `KZT` - KZT
				 *     * `LAK` - LAK
				 *     * `LBP` - LBP
				 *     * `LKR` - LKR
				 *     * `LRD` - LRD
				 *     * `LSL` - LSL
				 *     * `LTL` - LTL
				 *     * `LTT` - LTT
				 *     * `LUC` - LUC
				 *     * `LUF` - LUF
				 *     * `LUL` - LUL
				 *     * `LVL` - LVL
				 *     * `LVR` - LVR
				 *     * `LYD` - LYD
				 *     * `MAD` - MAD
				 *     * `MAF` - MAF
				 *     * `MCF` - MCF
				 *     * `MDC` - MDC
				 *     * `MDL` - MDL
				 *     * `MGA` - MGA
				 *     * `MGF` - MGF
				 *     * `MKD` - MKD
				 *     * `MKN` - MKN
				 *     * `MLF` - MLF
				 *     * `MMK` - MMK
				 *     * `MNT` - MNT
				 *     * `MOP` - MOP
				 *     * `MRO` - MRO
				 *     * `MRU` - MRU
				 *     * `MTL` - MTL
				 *     * `MTP` - MTP
				 *     * `MUR` - MUR
				 *     * `MVP` - MVP
				 *     * `MVR` - MVR
				 *     * `MWK` - MWK
				 *     * `MXN` - MXN
				 *     * `MXP` - MXP
				 *     * `MXV` - MXV
				 *     * `MYR` - MYR
				 *     * `MZE` - MZE
				 *     * `MZM` - MZM
				 *     * `MZN` - MZN
				 *     * `NAD` - NAD
				 *     * `NGN` - NGN
				 *     * `NIC` - NIC
				 *     * `NIO` - NIO
				 *     * `NLG` - NLG
				 *     * `NOK` - NOK
				 *     * `NPR` - NPR
				 *     * `NZD` - NZD
				 *     * `OMR` - OMR
				 *     * `PAB` - PAB
				 *     * `PEI` - PEI
				 *     * `PEN` - PEN
				 *     * `PES` - PES
				 *     * `PGK` - PGK
				 *     * `PHP` - PHP
				 *     * `PKR` - PKR
				 *     * `PLN` - PLN
				 *     * `PLZ` - PLZ
				 *     * `PTE` - PTE
				 *     * `PYG` - PYG
				 *     * `QAR` - QAR
				 *     * `RHD` - RHD
				 *     * `ROL` - ROL
				 *     * `RON` - RON
				 *     * `RSD` - RSD
				 *     * `RUB` - RUB
				 *     * `RUR` - RUR
				 *     * `RWF` - RWF
				 *     * `SAR` - SAR
				 *     * `SBD` - SBD
				 *     * `SCR` - SCR
				 *     * `SDD` - SDD
				 *     * `SDG` - SDG
				 *     * `SDP` - SDP
				 *     * `SEK` - SEK
				 *     * `SGD` - SGD
				 *     * `SHP` - SHP
				 *     * `SIT` - SIT
				 *     * `SKK` - SKK
				 *     * `SLE` - SLE
				 *     * `SLL` - SLL
				 *     * `SOS` - SOS
				 *     * `SRD` - SRD
				 *     * `SRG` - SRG
				 *     * `SSP` - SSP
				 *     * `STD` - STD
				 *     * `STN` - STN
				 *     * `SUR` - SUR
				 *     * `SVC` - SVC
				 *     * `SYP` - SYP
				 *     * `SZL` - SZL
				 *     * `THB` - THB
				 *     * `TJR` - TJR
				 *     * `TJS` - TJS
				 *     * `TMM` - TMM
				 *     * `TMT` - TMT
				 *     * `TND` - TND
				 *     * `TOP` - TOP
				 *     * `TPE` - TPE
				 *     * `TRL` - TRL
				 *     * `TRY` - TRY
				 *     * `TTD` - TTD
				 *     * `TWD` - TWD
				 *     * `TZS` - TZS
				 *     * `UAH` - UAH
				 *     * `UAK` - UAK
				 *     * `UGS` - UGS
				 *     * `UGX` - UGX
				 *     * `USD` - USD
				 *     * `USN` - USN
				 *     * `USS` - USS
				 *     * `UYI` - UYI
				 *     * `UYP` - UYP
				 *     * `UYU` - UYU
				 *     * `UYW` - UYW
				 *     * `UZS` - UZS
				 *     * `VEB` - VEB
				 *     * `VED` - VED
				 *     * `VEF` - VEF
				 *     * `VES` - VES
				 *     * `VND` - VND
				 *     * `VNN` - VNN
				 *     * `VUV` - VUV
				 *     * `WST` - WST
				 *     * `XAF` - XAF
				 *     * `XAG` - XAG
				 *     * `XAU` - XAU
				 *     * `XBA` - XBA
				 *     * `XBB` - XBB
				 *     * `XBC` - XBC
				 *     * `XBD` - XBD
				 *     * `XCD` - XCD
				 *     * `XDR` - XDR
				 *     * `XEU` - XEU
				 *     * `XFO` - XFO
				 *     * `XFU` - XFU
				 *     * `XOF` - XOF
				 *     * `XPD` - XPD
				 *     * `XPF` - XPF
				 *     * `XPT` - XPT
				 *     * `XRE` - XRE
				 *     * `XSU` - XSU
				 *     * `XTS` - XTS
				 *     * `XUA` - XUA
				 *     * `XXX` - XXX
				 *     * `YDD` - YDD
				 *     * `YER` - YER
				 *     * `YUD` - YUD
				 *     * `YUM` - YUM
				 *     * `YUN` - YUN
				 *     * `YUR` - YUR
				 *     * `ZAL` - ZAL
				 *     * `ZAR` - ZAR
				 *     * `ZMK` - ZMK
				 *     * `ZMW` - ZMW
				 *     * `ZRN` - ZRN
				 *     * `ZRZ` - ZRZ
				 *     * `ZWD` - ZWD
				 *     * `ZWL` - ZWL
				 *     * `ZWR` - ZWR */
				currency?:
					| 'ADP'
					| 'AED'
					| 'AFA'
					| 'AFN'
					| 'ALK'
					| 'ALL'
					| 'AMD'
					| 'ANG'
					| 'AOA'
					| 'AOK'
					| 'AON'
					| 'AOR'
					| 'ARA'
					| 'ARL'
					| 'ARM'
					| 'ARP'
					| 'ARS'
					| 'ATS'
					| 'AUD'
					| 'AWG'
					| 'AZM'
					| 'AZN'
					| 'BAD'
					| 'BAM'
					| 'BAN'
					| 'BBD'
					| 'BDT'
					| 'BEC'
					| 'BEF'
					| 'BEL'
					| 'BGL'
					| 'BGM'
					| 'BGN'
					| 'BGO'
					| 'BHD'
					| 'BIF'
					| 'BMD'
					| 'BND'
					| 'BOB'
					| 'BOL'
					| 'BOP'
					| 'BOV'
					| 'BRB'
					| 'BRC'
					| 'BRE'
					| 'BRL'
					| 'BRN'
					| 'BRR'
					| 'BRZ'
					| 'BSD'
					| 'BTN'
					| 'BUK'
					| 'BWP'
					| 'BYB'
					| 'BYN'
					| 'BYR'
					| 'BZD'
					| 'CAD'
					| 'CDF'
					| 'CHE'
					| 'CHF'
					| 'CHW'
					| 'CLE'
					| 'CLF'
					| 'CLP'
					| 'CNH'
					| 'CNX'
					| 'CNY'
					| 'COP'
					| 'COU'
					| 'CRC'
					| 'CSD'
					| 'CSK'
					| 'CUC'
					| 'CUP'
					| 'CVE'
					| 'CYP'
					| 'CZK'
					| 'DDM'
					| 'DEM'
					| 'DJF'
					| 'DKK'
					| 'DOP'
					| 'DZD'
					| 'ECS'
					| 'ECV'
					| 'EEK'
					| 'EGP'
					| 'ERN'
					| 'ESA'
					| 'ESB'
					| 'ESP'
					| 'ETB'
					| 'EUR'
					| 'FIM'
					| 'FJD'
					| 'FKP'
					| 'FRF'
					| 'GBP'
					| 'GEK'
					| 'GEL'
					| 'GHC'
					| 'GHS'
					| 'GIP'
					| 'GMD'
					| 'GNF'
					| 'GNS'
					| 'GQE'
					| 'GRD'
					| 'GTQ'
					| 'GWE'
					| 'GWP'
					| 'GYD'
					| 'HKD'
					| 'HNL'
					| 'HRD'
					| 'HRK'
					| 'HTG'
					| 'HUF'
					| 'IDR'
					| 'IEP'
					| 'ILP'
					| 'ILR'
					| 'ILS'
					| 'INR'
					| 'IQD'
					| 'IRR'
					| 'ISJ'
					| 'ISK'
					| 'ITL'
					| 'JMD'
					| 'JOD'
					| 'JPY'
					| 'KES'
					| 'KGS'
					| 'KHR'
					| 'KMF'
					| 'KPW'
					| 'KRH'
					| 'KRO'
					| 'KRW'
					| 'KWD'
					| 'KYD'
					| 'KZT'
					| 'LAK'
					| 'LBP'
					| 'LKR'
					| 'LRD'
					| 'LSL'
					| 'LTL'
					| 'LTT'
					| 'LUC'
					| 'LUF'
					| 'LUL'
					| 'LVL'
					| 'LVR'
					| 'LYD'
					| 'MAD'
					| 'MAF'
					| 'MCF'
					| 'MDC'
					| 'MDL'
					| 'MGA'
					| 'MGF'
					| 'MKD'
					| 'MKN'
					| 'MLF'
					| 'MMK'
					| 'MNT'
					| 'MOP'
					| 'MRO'
					| 'MRU'
					| 'MTL'
					| 'MTP'
					| 'MUR'
					| 'MVP'
					| 'MVR'
					| 'MWK'
					| 'MXN'
					| 'MXP'
					| 'MXV'
					| 'MYR'
					| 'MZE'
					| 'MZM'
					| 'MZN'
					| 'NAD'
					| 'NGN'
					| 'NIC'
					| 'NIO'
					| 'NLG'
					| 'NOK'
					| 'NPR'
					| 'NZD'
					| 'OMR'
					| 'PAB'
					| 'PEI'
					| 'PEN'
					| 'PES'
					| 'PGK'
					| 'PHP'
					| 'PKR'
					| 'PLN'
					| 'PLZ'
					| 'PTE'
					| 'PYG'
					| 'QAR'
					| 'RHD'
					| 'ROL'
					| 'RON'
					| 'RSD'
					| 'RUB'
					| 'RUR'
					| 'RWF'
					| 'SAR'
					| 'SBD'
					| 'SCR'
					| 'SDD'
					| 'SDG'
					| 'SDP'
					| 'SEK'
					| 'SGD'
					| 'SHP'
					| 'SIT'
					| 'SKK'
					| 'SLE'
					| 'SLL'
					| 'SOS'
					| 'SRD'
					| 'SRG'
					| 'SSP'
					| 'STD'
					| 'STN'
					| 'SUR'
					| 'SVC'
					| 'SYP'
					| 'SZL'
					| 'THB'
					| 'TJR'
					| 'TJS'
					| 'TMM'
					| 'TMT'
					| 'TND'
					| 'TOP'
					| 'TPE'
					| 'TRL'
					| 'TRY'
					| 'TTD'
					| 'TWD'
					| 'TZS'
					| 'UAH'
					| 'UAK'
					| 'UGS'
					| 'UGX'
					| 'USD'
					| 'USN'
					| 'USS'
					| 'UYI'
					| 'UYP'
					| 'UYU'
					| 'UYW'
					| 'UZS'
					| 'VEB'
					| 'VED'
					| 'VEF'
					| 'VES'
					| 'VND'
					| 'VNN'
					| 'VUV'
					| 'WST'
					| 'XAF'
					| 'XAG'
					| 'XAU'
					| 'XBA'
					| 'XBB'
					| 'XBC'
					| 'XBD'
					| 'XCD'
					| 'XDR'
					| 'XEU'
					| 'XFO'
					| 'XFU'
					| 'XOF'
					| 'XPD'
					| 'XPF'
					| 'XPT'
					| 'XRE'
					| 'XSU'
					| 'XTS'
					| 'XUA'
					| 'XXX'
					| 'YDD'
					| 'YER'
					| 'YUD'
					| 'YUM'
					| 'YUN'
					| 'YUR'
					| 'ZAL'
					| 'ZAR'
					| 'ZMK'
					| 'ZMW'
					| 'ZRN'
					| 'ZRZ'
					| 'ZWD'
					| 'ZWL'
					| 'ZWR'
					| null;
				date?: string;
				date__gt?: string;
				date__gte?: string;
				date__lt?: string;
				date__lte?: string;
				date__month?: number;
				date__year?: number;
				location_id?: number | null;
				location_id__isnull?: boolean;
				location_osm_id?: number;
				/** @description * `NODE` - NODE
				 *     * `WAY` - WAY
				 *     * `RELATION` - RELATION */
				location_osm_type?: 'NODE' | 'RELATION' | 'WAY' | null;
				/** @description Which field to use when ordering the results. */
				order_by?: string;
				owner?: string;
				/** @description A page number within the paginated result set. */
				page?: number;
				prediction_count?: number;
				prediction_count__gte?: number;
				prediction_count__lte?: number;
				price_count?: number;
				price_count__gte?: number;
				price_count__lte?: number;
				ready_for_price_tag_validation?: boolean;
				/** @description Number of results to return per page. */
				size?: number;
				/** @description * `PRICE_TAG` - PRICE_TAG
				 *     * `RECEIPT` - RECEIPT
				 *     * `GDPR_REQUEST` - GDPR_REQUEST
				 *     * `SHOP_IMPORT` - SHOP_IMPORT */
				type?: 'GDPR_REQUEST' | 'PRICE_TAG' | 'RECEIPT' | 'SHOP_IMPORT';
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PaginatedProofHalfFullList'];
				};
			};
		};
	};
	proofs_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Proof. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProofFull'];
				};
			};
		};
	};
	proofs_destroy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Proof. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description No response body */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	proofs_partial_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Proof. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['PatchedProofUpdate'];
				'application/x-www-form-urlencoded': components['schemas']['PatchedProofUpdate'];
				'multipart/form-data': components['schemas']['PatchedProofUpdate'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProofUpdate'];
				};
			};
		};
	};
	proofs_process_with_gemini_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'multipart/form-data': components['schemas']['ProofProcessWithGemini'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProofFull'];
				};
			};
		};
	};
	proofs_upload_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'multipart/form-data': components['schemas']['ProofUpload'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ProofFull'];
				};
			};
		};
	};
	session_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SessionFull'];
				};
			};
		};
	};
	session_destroy: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description No response body */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	stats_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['TotalStats'];
				};
			};
		};
	};
	status_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Status'];
				};
			};
		};
	};
	users_list: {
		parameters: {
			query?: {
				/** @description Which field to use when ordering the results. */
				order_by?: string;
				/** @description A page number within the paginated result set. */
				page?: number;
				price_count?: number;
				price_count__gte?: number;
				price_count__lte?: number;
				/** @description Number of results to return per page. */
				size?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PaginatedUserList'];
				};
			};
		};
	};
	users_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique value identifying this User. */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['User'];
				};
			};
		};
	};
}
